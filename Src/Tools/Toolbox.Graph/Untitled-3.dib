#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

byte[] four_bytes = System.Security.Cryptography.RandomNumberGenerator.GetBytes(4);

// four_bytes[2] = 0;
// four_bytes[3] = 0;
uint rand = BitConverter.ToUInt32(four_bytes, 0);

string randString = rand.ToString("X8");
Console.WriteLine($"rand={randString}");
Console.WriteLine($"ticks={DateTime.UtcNow.Ticks}");

#!csharp

long c = 10;
Console.WriteLine($"c = {c:d10}, {c.ToString("d10")}");
Console.WriteLine($"Max={long.MaxValue}, {long.MaxValue.ToString().Length}");

#!csharp

#r "nuget: Microsoft.Extensions.DependencyInjection"
using Microsoft.Extensions.DependencyInjection;

public interface IFoo
{
    int GetValue();
}

public class F1 : IFoo { public int GetValue() => 5;}
public class F2 : IFoo { public int GetValue() => 5;}

public class BuildServiceProvider
{
    public BuildServiceProvider(IFoo[] foos)
    {
        Console.WriteLine($"foos.Length={foos.Length}");

        foreach(var f in foos)
        {
            Console.WriteLine($"getValue={f.GetValue()}");
        }
    }
}

var services = new ServiceCollection()
    .AddSingleton<IFoo, F1>()
    .AddSingleton<IFoo, F2>()
    .AddSingleton<BuildServiceProvider>()
    .BuildServiceProvider();
    
Console.WriteLine("hello");

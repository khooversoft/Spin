
number              = regex '[+-]?[0-9]+' ;
symbol              = regex '[a-zA-Z][a-zA-Z0-9\-/]*' ;
base64              = string ;
equal               = '=' ;
join-left           = '->' ;
join-inner          = '<->' ;
return-sym          = 'return' ;
select-sym          = 'select' ;
delete-sym          = 'delete' ;
update-sym          = 'update' ;
upsert-syn          = 'upsert' ;
node-sym            = 'node' ;
edge-sym            = 'edge' ;
add-sym             = 'add' ;
set-sym             = 'set' ;
open-param          = '(' #group-start #node;
close-param         = ')' #group-end #node ;
open-bracket        = '[' #group-start #edge ;
close-bracket       = ']' #group-end #edge ;
open-brace          = '{' #group-start #data ;
close-brace         = '}' #group-end #data ;
comma               = ',' ;
term                = ';' ;

alias               = symbol ;
tag                 = symbol, ['=', symbol ] ;
tags                = { comma, tag } ;
node-spec           = open-param, tag, { comma, tag }, close-param, [ symbol ] ;
edge-spec           = open-bracket, tag, { comma, tag }, close-bracket, [ symbol ] ;
join                = [ join-left | join-inner ] ;
return-query        = return-sym, symbol, { comma, symbol } ;
entity-data         = symbol, open-brace, base64, close-brace ;
set-cmd             = set-sym, tag, { comma, tag } ;

select-node-query   = node-spec, { join, edge-spec } ;
edge-node-query     = edge-spec, { join, node-spec } ;

addCommand          = add-sym, ( node-sym | edge-sym ), tag, { comma, tag }, [ entity-data ], term ;
updateCommand       = update-sym, ( node-sym | edge-sym ), ( select-node-query | edge-node-query ), set-cmd, term;
deleteCommand       = delete-sym, ( node-sym | edge-sym ), ( select-node-query | edge-node-query ), term;
selectCommand       = select-sym, ( node-sym | edge-sym ), ( select-node-query | edge-node-query ), [ return-query ], term ;

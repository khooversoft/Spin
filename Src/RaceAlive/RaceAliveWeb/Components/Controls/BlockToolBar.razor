<MudPaper Elevation="3" Outlined=true Square=false Style="margin-top:20px">
    @if (Title.IsNotEmpty())
    {
        <MudText Typo="Typo.h6" Style="padding: 0px 10px 0px 5px">@Title</MudText>
    }

    @if (ShowTooBar)
    {
        <MudToolBar Dense=true Gutters=false>
            @if (OnAdd.HasDelegate)
            {
                <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="OnAddClicked" Disabled=DisableAdd />
            }

            @if (OnEdit.HasDelegate)
            {
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="OnEditClicked" Disabled=DisableEdit />
            }

            @if (OnDelete.HasDelegate)
            {
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="OnDeleteClicked" Disabled=DisableDelete />
            }

            @if (OnSearch.HasDelegate)
            {
                <MudSpacer />
                <MudTextField @bind-Value=@_searchString
                              Placeholder="search"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Immediate=true
                              Clearable=true
                              Disabled="DisableSearch" />
            }
        </MudToolBar>
    }

    <div style="margin: 10px">
        @ChildContent
    </div>
</MudPaper>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback<string?> OnSearch { get; set; }
    [Parameter] public bool DisableEdit { get; set; }
    [Parameter] public bool DisableAdd { get; set; }
    [Parameter] public bool DisableDelete { get; set; }
    [Parameter] public bool DisableSearch { get; set; }
    [Parameter] public string? Title { get; set; }

    private bool ShowTooBar => OnAdd.HasDelegate || OnEdit.HasDelegate || OnDelete.HasDelegate || OnSearch.HasDelegate;

    private string _searchStringValue = string.Empty;

    private async Task OnAddClicked() => await OnAdd.InvokeAsync(null);
    private async Task OnEditClicked() => await OnEdit.InvokeAsync(null);
    private async Task OnDeleteClicked() => await OnDelete.InvokeAsync(null);

    private string _searchString
    {
        get => _searchStringValue;
        set
        {
            if (_searchStringValue != value)
            {
                _searchStringValue = value;
                _ = Task.Run(async () => await OnSearch.InvokeAsync(_searchStringValue));
            }
        }
    }

}
@using NBlog.sdk
@using NBlogWeb3.Application
@using Toolbox.Extensions
@using Toolbox.Tools
@using Toolbox.Types
@rendermode InteractiveServer

@if (_flow.State == 2)
{
    <div class=@_articleSummaryClass>
        <div class="@_articleContentClass">
            <button class="article-button" type="button" @onclick=@HideOrShow>
                @if (_isCollapse)
                {
                    <svg class="bi f5"><use xlink:href="#three-dots"></use></svg>
                }
                else
                {
                    <svg class="bi f5"><use xlink:href="#chevron-up"></use></svg>
                }
            </button>

            @if (_docFileId.IsNotEmpty())
            {
                <a href="@_docFileId" class="article-header-link text-info">@_title</a>
            }
            else
            {
                <span class="article-header">@_title</span>
            }

            @if (!_articleDetail.Manifest.NoShowDate)
            {
                <div class="d-flex align-items-center mt-3">
                    <span class="d-flex align-items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" class="me-2" viewBox="0 0 16 16" role="img" fill="currentColor">
                            <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path>
                            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path>
                        </svg>
                        @_date
                    </span>
                </div>
            }

            <div class="@_collapseClass">
                <div class="mt-3">
                    @((MarkupString)_html)
                </div>
            </div>
        </div>
    </div>
}
else
{
    if (Index < 3)
    {
        <LoadingComponent Size="1" />
    }
}


@code {
    [Parameter] public string DbName { get; set; } = null!;
    [Parameter] public string ArticleId { get; init; } = null!;
    [Parameter] public int Index { get; init; }
    [Parameter] public string? Attribute { get; init; }
    [Parameter] public bool Collapse { get; init; }

    [Inject] private ArticleService _articleService { get; init; } = null!;
    [Inject] private ILogger<ArticleSummary> _logger { get; init; } = null!;

    private ArticleDetail _articleDetail { get; set; } = null!;
    private SequentialState _flow = new SequentialState();
    private string _title { get; set; } = string.Empty;
    private string _html { get; set; } = string.Empty;
    private string _date { get; set; } = string.Empty;
    private string? _docFileId { get; set; } = string.Empty;
    private string _articleSummaryClass => _isCollapse ? "article-summary article-summary-collapse" : "article-summary";
    private string _articleContentClass = "article-content";
    private string _collapseClass => _isCollapse ? "collapse" : string.Empty;
    private bool _isCollapse = false;

    private void HideOrShow() => _isCollapse = !_isCollapse;
    protected override void OnParametersSet() => _isCollapse = Collapse;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _flow.Reset();
            await Load();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        var context = new ScopeContext(_logger);
        if (!_flow.MoveState(1)) return;

        string attribute = Attribute ?? NBlogConstants.SummaryAttribute;

        try
        {
            var mdDoc = await _articleService.ReadArticleDetail(ArticleId, attribute, context);
            if (mdDoc.IsError())
            {
                _title = mdDoc.ToString();
                return;
            }

            _articleDetail = mdDoc.Return();
            _title = _articleDetail.Manifest.Title;
            _html = _articleDetail.MarkdownDoc.ToHtml();

            DateTime[] dates = (_articleDetail.Manifest.StartDate, _articleDetail.Manifest.EndDate) switch
            {
                (DateTime v1, DateTime v2) => [v1, v2],
                _ => [_articleDetail.Manifest.CreatedDate],
            };

            _date = dates
                .OfType<DateTime>()
                .Select(x => x.ToString("MMMM dd, yyyy"))
                .Join(" - ");

            var commandNode = _articleDetail.Manifest.GetLinkedCommand(NBlogConstants.MainAttribute, NBlogConstants.SummaryAttribute);
            if (commandNode.IsOk())
            {
                _docFileId = NavRoutes.GotoArticle(DbName, NBlogConstants.MainAttribute, ArticleId);
            }
        }
        finally
        {
            _flow.MoveState(2);
            await InvokeAsync(() => StateHasChanged());
        }
    }
}
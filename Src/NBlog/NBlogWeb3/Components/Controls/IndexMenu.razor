@using NBlog.sdk
@using Toolbox.Tools
@using Toolbox.Types

<nav class="x-container">
    <div class="x-btn-link-container">
        @foreach (var link in _links)
        {
            <a class="btn x-btn-link " @onclick="() => CloseAndLink(link.ArticleLink)">
                <span class="underline-from-left x-content-menu">@link.Topic</span>
            </a>
        }
    </div>

    @foreach (var group in _indexMap.OrderBy(x => x.GroupName))
    {
        <span class="x-group-text">@group.GroupName</span>
        <div class="thin-hr"></div>

        <div class="x-btn-link-container">
            @foreach (var link in group.Items.OrderBy(x => x.Topic))
            {
                <a class="btn x-btn-link " @onclick="() => CloseAndLink(link.ArticleLink)">
                    <span class="underline-from-left">@link.Topic</span>
                </a>
            }
        </div>
    }
</nav>

@code {
    [Parameter] public EventCallback CloseIndex { get; set; }
    [CascadingParameter] public NBlogConfiguration Configuration { get; set; } = null!;

    [Inject] public NavigationManager _navManager { get; set; } = null!;
    [Inject] private ArticleService _articleService { get; init; } = null!;
    [Inject] private ConfigurationService _configurationService { get; init; } = null!;
    [Inject] private ILogger<IndexMenu> _logger { get; init; } = null!;

    private SequentialState _flow = new SequentialState();
    private IReadOnlyList<ArticleIndex>? _indexes { get; set; }
    private IReadOnlyList<IndexMap> _indexMap { get; set; } = Array.Empty<IndexMap>();
    private IReadOnlyList<(string Topic, string ArticleLink)> _links = Array.Empty<(string, string)>();

    private async Task CloseAndLink(string link)
    {
        await CloseIndex.InvokeAsync();
        _navManager.NavigateTo(link);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Configuration == null || _indexes != null) return;

        _flow.Reset();
        var context = new ScopeContext(_logger);

        _links = Configuration.OverviewPanel.Menus
            .OrderBy(x => x.OrderIndex)
            .Select(x => (topic: x.Title, link: x.HRef))
            .Append(("Contact", NavRoutes.GotoContact(Configuration.DbName)))
            .Append(("About", NavRoutes.GotoAbout(Configuration.DbName)))
            .ToArray();

        try
        {
            _indexes = await _articleService.GetIndexDocs(Configuration.DbName, context);

            _indexMap = _indexes
                .Select(x => (group: Unwrap(x.IndexName), index: x))
                .Where(x => x.group.groupName != "route")
                .Select(x => (groupName: x.group.groupName, topic: x.group.topic, link: NavRoutes.GotoSummary(Configuration.DbName, x.index.IndexName)))
                .GroupBy(x => x.groupName)
                .Select(x => new IndexMap
                    {
                        GroupName = x.Key,
                        Items = x.GroupBy(y => y.topic).Select(x => (x.Key, x.First().link)).ToArray(),
                        SvcCommand = "r",
                    })
                .ToArray();

            var groupNames = _indexes.Select(x => Unwrap(x.IndexName).groupName).ToArray();
            var iconGroups = await _configurationService.Lookup(Configuration.DbName, groupNames, context);
            var iconDict = iconGroups.ToDictionary(x => x.GroupName, x => x, StringComparer.OrdinalIgnoreCase);

            _indexMap = _indexMap
                .Select(x => x with { SvcCommand = CreateSvg(iconDict, x.GroupName) })
                .ToArray();
        }
        finally
        {
            _flow.MoveState(1);
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private static (string groupName, string topic) Unwrap(string indexName)
    {
        var parts = indexName.Split('/');
        return (parts[0], parts[1]);
    }

    private static string CreateSvg(IDictionary<string, IndexGroup> iconDict, string groupName)
    {
        (string iconName, string color) = iconDict.TryGetValue(groupName, out var indexGroup) ?
        (indexGroup.IconName, indexGroup.IconColor) :
        ("moon - stars - fill", "white");

        return $"<svg class=\"bi me-2 f5\" style=\"color: {color} !important\"><use xlink:href=#{iconName}></use></svg>";
    }

    private record IndexMap
    {
        public required string GroupName { get; init; }
        public required string SvcCommand { get; init; }
        public required IReadOnlyList<(string Topic, string ArticleLink)> Items { get; init; }
    }
}

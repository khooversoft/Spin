@using NBlog.sdk
@using Toolbox.Tools
@using Toolbox.Types

<nav class="x-container nav nav-pills">
    <div class="nav-link d-flex align-items-center fw-600 ">
        <svg class="bi me-2 f5 text-success"><use xlink:href="#arrow-right-square"></use></svg>
        <a class="btn x-btn-left-menu x-left-menu-link-text" @onclick=OnShowIndex>Content</a>
    </div>

    @foreach (var group in _indexMap)
    {
        <div class="x-group-container nav-link d-flex align-items-center fw-600">
            @((MarkupString)group.SvcCommand)
            <span class="x-group-text btn x-left-menu-link-text">@group.GroupName</span>
        </div>

        @foreach (var link in group.Items)
        {
            <div class="x-group-item-container d-flex align-items-center fw-600">
                <a class="x-group-item-text btn x-btn-left-menu x-left-menu-link-text" href=@link.ArticleLink>@link.Topic</a>
            </div>
        }
    }
</nav>

@code {
    [Parameter] public EventCallback ShowIndex { get; set; }
    [Parameter] public NBlogConfiguration? Configuration { get; init; }
    [Inject] private ArticleService _articleService { get; init; } = null!;
    [Inject] private ConfigurationService _configurationService { get; init; } = null!;
    [Inject] private ILogger<IndexMenu> _logger { get; init; } = null!;

    private SequentialState _flow = new SequentialState();
    private IReadOnlyList<ArticleIndex>? _indexes { get; set; }
    private IReadOnlyList<IndexMap> _indexMap { get; set; } = Array.Empty<IndexMap>();
    private async Task OnShowIndex() => await ShowIndex.InvokeAsync();

    protected override async Task OnParametersSetAsync()
    {
        if (Configuration == null) return;

        _flow.Reset();
        var context = new ScopeContext(_logger);

        try
        {
            _indexes = await _articleService.GetIndexDocs(Configuration.DbName, context);

            _indexMap = _indexes
            .Select(x => (group: Unwrap(x.IndexName), index: x))
            .GroupBy(x => x.group.groupName)
            .Select(x => new IndexMap
                {
                    GroupName = x.Key,
                    Items = x.GroupBy(y => y.group.topic)
                        .Select(x => (x.Key, NavRoutes.GotoSummary(Configuration.DbName, x.First().index.IndexName)))
                        .ToArray(),
                    SvcCommand = "r",
                })
            .ToArray();

            var groupNames = _indexes.Select(x => Unwrap(x.IndexName).groupName).ToArray();
            var iconGroups = await _configurationService.Lookup(Configuration.DbName, groupNames, context);
            var iconDict = iconGroups.ToDictionary(x => x.GroupName, x => x, StringComparer.OrdinalIgnoreCase);

            _indexMap = _indexMap
                .Select(x => x with { SvcCommand = CreateSvg(iconDict, x.GroupName) })
                .ToArray();
        }
        finally
        {
            _flow.MoveState(1);
            await InvokeAsync(() => StateHasChanged());
        }

    }

    private static (string groupName, string topic) Unwrap(string indexName)
    {
        var parts = indexName.Split('/');
        return (parts[0], parts[1]);
    }

    private static string CreateSvg(IDictionary<string, IndexGroup> iconDict, string groupName)
    {
        (string iconName, string color) = iconDict.TryGetValue(groupName, out var indexGroup) ?
        (indexGroup.IconName, indexGroup.IconColor) :
        ("moon - stars - fill", "white");

        return $"<svg class=\"bi me-2 f5\" style=\"color: {color} !important\"><use xlink:href=#{iconName}></use></svg>";
    }

    private record IndexMap
    {
        public required string GroupName { get; init; }
        public required string SvcCommand { get; init; }
        public required IReadOnlyList<(string Topic, string ArticleLink)> Items { get; init; }
    }
}

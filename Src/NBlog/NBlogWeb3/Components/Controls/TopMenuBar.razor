@using NBlog.sdk
@using NBlogWeb3.Models
@using Toolbox.Extensions
@using Toolbox.Tools
@using Toolbox.Types
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@if (_flow.State == 1)
{
    <div class="x-top-menu-container">
        <div class="d-flex x-navbar-container">
            @if (Configuration != null)
            {
                <div class="hamburger">
                    <Hamburger OnClick=ShowLeftMenu Open=_leftButtonState />
                </div>

                <div class="x-nvarbar-brand-container">
                    <a href=@NavRoutes.GotoHome()>
                        <img src="/Images/khicon.svg" class="x-icon-svg " aria-label="KH" />
                    </a>
                </div>

                <div class="x-top-menu-title flex-fill p-2">@_title</div>

                <a class="x-contact-link btn btn-link" href="@_contactUrl">Contact</a>

                <input class="x-top-menu-inputbox form-control" placeholder="Search" aria-label="Search" @oninput=OnSearchInput @bind=_searchText @onkeydown="OnSearchKeyPress" />

                <button type="button" class="x-top-menu-search-button btn btn-outline-dark" @onclick=SearchEvent>Search</button>

                <div class="x-btn-icon-container">
                    <a @onclick=SearchEvent>
                        <svg class="bi me-2 f5 text-dark"><use xlink:href="#search"></use></svg>
                    </a>
                </div>
            }
        </div>
    </div>
}

@code {
    [CascadingParameter] public NBlogConfiguration Configuration { get; set; } = null!;

    [Inject] private LeftButtonStateService LeftButtonState { get; set; } = null!;
    [Inject] private NavigationManager _navManager { get; set; } = null!;
    [Inject] private ConfigurationService _configurationService { get; set; } = null!;
    [Inject] private ILogger<TopMenuBar> _logger { get; set; } = null!;

    private IReadOnlyList<OverviewMenu> _menus = Array.Empty<OverviewMenu>();
    private string _title = "..."; // "Secrets of .NET and Cloud";
    private string _contactUrl = string.Empty;
    private string _searchText = string.Empty;
    private SequentialState _flow = new SequentialState();
    private bool _leftButtonState;

    protected override void OnParametersSet()
    {
        if (Configuration == null) return;

        _flow.Reset();
        _leftButtonState = LeftButtonState.Get();

        _contactUrl = NavRoutes.GotoContact(Configuration.DbName);
        _title = Configuration.OverviewPanel.Title;
        _menus = Configuration.OverviewPanel.Menus.OrderBy(x => x.OrderIndex).Take(2).ToArray();

        _flow.MoveState(1);
    }

    private void ShowLeftMenu()
    {
        LeftButtonState.Toggle();
        _leftButtonState = LeftButtonState.Get();
    }

    private void SearchEvent()
    {
        if (_searchText.IsEmpty() || Configuration == null) return;

        _navManager.NavigateTo(NavRoutes.GotoSearch(Configuration.DbName, _searchText), true);
    }

    private void OnSearchInput(ChangeEventArgs e) => _searchText = e.Value?.ToString() ?? string.Empty;

    private void OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") SearchEvent();
    }
}
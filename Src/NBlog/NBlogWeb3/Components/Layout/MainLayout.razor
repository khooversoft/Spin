@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using NBlog.sdk
@using NBlogWeb3.Components.Controls
@using NBlogWeb3.Models
@using Toolbox.Extensions
@using Toolbox.Tools
@using Toolbox.Types
@inherits LayoutComponentBase

<Symbols />

<button type="button" class="btn btn-floating scroll-to-top" id="btn-back-to-top">
    <svg class="bi f5"><use xlink:href="#arrow-up-square"></use></svg>
</button>

@if (_flow.State == 1)
{
    <div class="@_themeClass">
        <div class="app-body">
            <div class="x-top-menu-container">
                <TopMenuBar Configuration=@_configuration />
            </div>

            <div class="page">
                <div class="x-left-menu-sidebar">
                    <div class="x-left-menu-container">
                        <LeftMenuContainer Configuration="@_configuration" />
                    </div>
                </div>

                <main>
                    <article class="x-main-content-container">
                        <div class="x-main-configuration-container">
                            <LeftMenuContainer Configuration="@_configuration" />
                        </div>

                        @Body
                    </article>
                </main>
            </div>
        </div>
    </div>
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    [CascadingParameter] RouteData RouteData { get; set; } = null!;

    [Inject] private ConfigurationService _configurationService { get; init; } = null!;
    [Inject] private ILogger<MainLayout> _logger { get; init; } = null!;
    [Inject] private LeftButtonStateService _leftButtonStateService { get; init; } = null!;

    private string _themeClass = "dark-theme";
    private NBlogConfiguration _configuration = null!;
    private SequentialState _flow = new SequentialState();

    protected override async Task OnParametersSetAsync()
    {
        if (RouteData == null) return;

        _flow.Reset();
        string? dbName = null;
        if (RouteData.RouteValues.TryGetValue("dbName", out var value) && (value is string v)) dbName = v;
        dbName ??= "*";

        var context = new ScopeContext(_logger);
        var configurationOption = await _configurationService.Get(dbName, context);
        if (configurationOption.IsError())
        {
            throw new InvalidOperationException($"Failed to load configruation for dbName={dbName}");
        }

        _configuration = configurationOption.Return();
        _themeClass = $"{_configuration.Theme}-theme";

        _flow.MoveState(1);
        await base.OnParametersSetAsync();
    }
}
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using NBlog.sdk
@using NBlogWeb3.Components.Controls
@using Toolbox.Tools
@rendermode InteractiveServer

<div class="x-left-menu-container">
    @if (_flow.State == 1)
    {
        @switch (_showIndex)
        {
            case false:
                <LeftMenuContainer ShowIndex="OnShowIndex" Configuration="@Configuration" TargetName="@NBlogConstants.TargetName.Content" />
                @* <LeftMenuContainer ShowIndex="OnShowIndex" Configuration="@Configuration", TargetName="@NBlogConstants.TargetName.Content" /> *@
                break;

            case true:
                <LeftMenuContainer ShowIndex="OnShowIndex" Configuration="@Configuration" TargetName="@NBlogConstants.TargetName.Index" />
                @* <LeftMenuContainer ShowIndex="OnShowIndex" Configuration="@Configuration" , TargetName="@NBlogConstants.TargetName.Index" /> *@
                break;
        }
    }
</div>

@code {
    [Parameter] public NBlogConfiguration? Configuration { get; init; }
    [Inject] public ProtectedSessionStorage _store { get; init; } = null!;

    private bool _showIndex { get; set; }
    private SequentialState _flow = new SequentialState();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _flow.MoveState(1);
            await GetShowIndex();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnShowIndex()
    {
        _showIndex = !_showIndex;
        await _store.SetAsync(nameof(_showIndex), _showIndex);
    }

    private async Task GetShowIndex()
    {
        var result = await _store.GetAsync<bool>(nameof(_showIndex));
        _showIndex = result.Success ? result.Value : false;
    }
}
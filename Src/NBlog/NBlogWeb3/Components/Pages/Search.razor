@page "/search/{dbName}/{searchString}"
@layout Layout.MainLayout

@using NBlog.sdk
@using NBlogWeb3.Components.Controls
@using NBlogWeb3.Components.Layout
@using Toolbox.Extensions
@using Toolbox.Tools
@using Toolbox.Types
@rendermode InteractiveServer

<PageTitle>Kelvin Hoover</PageTitle>


@switch (_flow.State)
{
    case 0:
        <LoadingComponent />
        break;

    case 2:
        <div class="container p-0 mt-4">
            <div class="row p-2">
                <div class="col-md-2">
                    <label class="text-white">Searching for:</label>
                </div>
                <div class="col-md-10 search-box">
                    <span class="text-white">@_title</span>
                </div>
            </div>
        </div>

        @foreach (var manifest in _manifests.NotNull().WithIndex())
        {
            <ArticleSummary DbName="@DbName" ArticleId="@manifest.Item.ArticleId" Index="@manifest.Index" />
        }

        break;
}


@code {
    [Parameter] public string DbName { get; set; } = null!;
    [Parameter] public string SearchString { get; init; } = null!;

    [Inject] private SearchService _searchService { get; init; } = null!;
    [Inject] private ILogger<Home> _logger { get; init; } = null!;

    private IReadOnlyList<ArticleManifest>? _manifests { get; set; } = null!;
    private SequentialState _flow = new SequentialState();
    private string _title = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _flow.Reset();
            await Load();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        if (!_flow.MoveState(1)) return;
        var context = new ScopeContext(_logger);

        try
        {
            string search = _title = Uri.UnescapeDataString(SearchString);
            _manifests = await _searchService.Search(DbName, search, context);
        }
        finally
        {
            _flow.MoveState(2);
            await InvokeAsync(() => StateHasChanged());
        }
    }
}

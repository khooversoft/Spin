@page "/summary/{dbName}/{*index}"
@using NBlog.sdk
@using NBlogWeb3.Components.Controls
@using Toolbox.Extensions
@using Toolbox.Tools
@using Toolbox.Types
@layout Layout.MainLayout
@rendermode InteractiveServer

@if (_articleIds != null && _flow.State == 2)
{
    <div class="summary-header-bar">
        <button class="summary-header-button" type="button" @onclick=@HideAll style="float: right;">
            <svg class="bi f5"><use xlink:href="#dash-square"></use></svg>
        </button>
        <button class="summary-header-button" type="button" @onclick=@ShowAll style="float: right;">
            <svg class="bi f5"><use xlink:href="#plus-square"></use></svg>
        </button>
    </div>

    @foreach (var manifest in _articleIds.WithIndex())
    {
        <ArticleSummary ArticleId="@manifest.Item" Index="@manifest.Index" Attribute="@_attribute" DbName="@DbName" Collapse=@_collapse />
    }
}
else
{
    if (_flow.State == 3)
    {
        <ShowRouteError Title="Cannot find area" />
    }
    else
    {
        <LoadingComponent Size="0" />
    }
}

@code {
    [Parameter] public string? DbName { get; set; }
    [Parameter] public string? Index { get; set; }

    [Inject] private ArticleService _articleService { get; init; } = null!;
    [Inject] private ILogger<Home> _logger { get; init; } = null!;

    private SequentialState _flow = new SequentialState();
    private IReadOnlyList<string>? _articleIds = null!;
    private string? _attribute;
    private bool _collapse;

    private void HideAll() => _collapse = true;
    private void ShowAll() => _collapse = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _flow.Reset();
            await Load();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        if (DbName == null) return;

        var context = new ScopeContext(_logger);
        if (!_flow.MoveState(1)) return;

        try
        {
            Index = Index?.Func(x => Uri.UnescapeDataString(x));

            _articleIds = Index switch
            {
                string v when v != "home" => (await _articleService.GetIndexSummariesByName(DbName, v, context))
                    .OrderBy(x => x.Index)
                    .Select(x => x.ArticleId)
                    .ToArray(),

                _ => (await _articleService.GetSummaries(DbName, context))
                    .OrderBy(x => x.Index)
                    .Select(x => x.ArticleId)
                    .ToArray(),
            };

            if (Index?.EqualsIgnoreCase("home") == false && _articleIds.Count == 0)
            {
                _flow.SetState(3);
                return;
            }

            _attribute = _articleIds?.Count == 1 ? NBlogConstants.MainAttribute : null;
        }
        finally
        {
            _flow.MoveState(2);
            await InvokeAsync(() => StateHasChanged());
        }
    }
}

@using NBlog.sdk
@using NBlogWeb.Components.Layout
@using Toolbox.Tools
@using Toolbox.Types
@rendermode InteractiveServer

<Symbols />

<div class="bd-sidebar">
    <div class="masthead pt-5">

        @if (_flow.State == 2)
        {
            <div class="mb-4 text-lg-start">
                <div class="ms-3 ms-lg-0">
                    <h1 class="mb-1 mb-lg-2 f1 fw-600">@_title</h1>
                    <p class="col-sm-8 col-lg-12 mx-auto mb-1 mb-lg-4">@_lines[0]</p>

                    @foreach (var line in _lines.Skip(1))
                    {
                        <p class="col-sm-8 col-lg-12 mx-auto mb-1 mb-lg-4 d-none d-lg-block">
                            @line
                        </p>
                    }
                </div>

                <nav class="nav nav-pills justify-content-center flex-lg-column justify-content-lg-start index-back-to-home">
                    <dev class="nav-link d-flex align-items-center fw-600">
                        <svg class="bi me-2 f5 text-success"><use xlink:href="#arrow-left-square"></use></svg>
                        <a class="btn btn-left-menu overview-text" @onclick=IndexEvent>Back to overview</a>
                    </dev>
                </nav>

                @foreach (var group in _indexMap)
                {
                    <dev class="nav nav-pills justify-content-center flex-lg-column justify-content-lg-start left-menu-group-content">
                        <dev class="left-menu-format nav-link d-flex align-items-center fw-600">
                            @((MarkupString)group.SvcCommand)
                            <span class="left-menu-group">@group.GroupName</span>
                        </dev>
                    </dev>

                    @foreach (var link in group.Items)
                    {
                        <div class="left-menu-format nav-link d-flex align-items-center fw-600">
                            <a href=@link.ArticleLink>
                                <span class="btn btn-left-menu left-menu-topic"> @link.Topic </span>
                            </a>
                        </div>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback ShowIndex { get; set; }
    [Parameter] public string? DbName { get; init; }

    [Inject] private ArticleService _articleService { get; init; } = null!;
    [Inject] private ConfigurationService _configurationService { get; init; } = null!;
    [Inject] private ILogger<LeftContextIndex> _logger { get; init; } = null!;

    private SequentialState _flow = new SequentialState();
    private IReadOnlyList<ArticleIndex>? _indexes { get; set; }
    private IReadOnlyList<IndexMap> _indexMap { get; set; } = Array.Empty<IndexMap>();
    private NBlogConfiguration _configuration = null!;

    private async Task IndexEvent() => await ShowIndex.InvokeAsync();

    private string? _title = "";
    public IReadOnlyList<string> _lines = [""];


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _flow.Reset();
            await Load();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        if (!_flow.MoveState(1)) return;
        var context = new ScopeContext(_logger);

        try
        {
            if (DbName == null) return;
            var configurationOption = await _configurationService.Get(DbName, context);
            if (configurationOption.IsError()) return;
            _configuration = configurationOption.Return();

            _title = _configuration.IndexPanel.Title;
            _lines = _configuration.IndexPanel.Lines.ToArray();

            _indexes = await _articleService.GetIndexDocs(DbName, context);

            _indexMap = _indexes
                .Select(x => (group: Unwrap(x.IndexName), index: x))
                .GroupBy(x => x.group.groupName)
                .Select(x => new IndexMap
                    {
                        GroupName = x.Key,
                        Items = x.GroupBy(y => y.group.topic)
                                .Select(x => (x.Key, NavRoutes.GotoSummary(DbName, x.First().index.IndexName)))
                                .ToArray(),
                        SvcCommand = "r",
                    })
                .ToArray();

            var groupNames = _indexes.Select(x => Unwrap(x.IndexName).groupName).ToArray();
            var iconGroups = await _configurationService.Lookup(DbName, groupNames, context);
            var iconDict = iconGroups.ToDictionary(x => x.GroupName, x => x, StringComparer.OrdinalIgnoreCase);

            _indexMap = _indexMap
                .Select(x => x with { SvcCommand = CreateSvg(iconDict, x.GroupName) })
                .ToArray();
        }
        finally
        {
            _flow.MoveState(2);
            await InvokeAsync(() => StateHasChanged());
        }

    }

    private static (string groupName, string topic) Unwrap(string indexName)
    {
        var parts = indexName.Split('/');
        return (parts[0], parts[1]);
    }

    private static string CreateSvg(IDictionary<string, IndexGroup> iconDict, string groupName)
    {
        (string iconName, string color) = iconDict.TryGetValue(groupName, out var indexGroup) ?
            (indexGroup.IconName, indexGroup.IconColor) :
            ("moon - stars - fill", "white");

        return $"<svg class=\"bi me-2 f5\" style=\"color: {color} !important\"><use xlink:href=#{iconName}></use></svg>";
    }

    private record IndexMap
    {
        public required string GroupName { get; init; }
        public required string SvcCommand { get; init; }
        public required IReadOnlyList<(string Topic, string ArticleLink)> Items { get; init; }
    }
}
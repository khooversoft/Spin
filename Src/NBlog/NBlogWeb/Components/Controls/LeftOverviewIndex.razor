@using NBlog.sdk
@using NBlogWeb.Components.Layout
@using Toolbox.Tools
@using Toolbox.Types
@rendermode InteractiveServer

<Symbols />

<div class="sidebar">
    <div class="masthead pt-5">
        @if (_flow.State == 2)
        {
            <div class="mb-4 text-lg-start">
                <div class="ms-3 ms-lg-0">
                    <h1 class="mb-1 mb-lg-2 f1 fw-600">@_title</h1>
                    <p class="col-sm-8 col-lg-12 mx-auto mb-1 mb-lg-4">@_lines[0]</p>

                    @foreach (var line in _lines.Skip(1))
                    {
                        <p class="col-sm-8 col-lg-12 mx-auto mb-1 mb-lg-4 d-none d-lg-block">
                            @line
                        </p>
                    }
                </div>
            </div>

            <nav class="nav nav-pills justify-content-center flex-lg-column justify-content-lg-start gap-1">
                @foreach (var item in _indexMap)
                {
                    <dev class="nav-link d-flex align-items-center fw-600">
                        @((MarkupString)item.SvcCommand)
                        <a class="btn btn-left-menu left-menu-link-text" href="@item.HRef">@item.Title</a>
                    </dev>
                }

                <dev class="nav-link d-flex align-items-center fw-600">
                    <svg class="bi me-2 f5 text-success"><use xlink:href="#arrow-right-square"></use></svg>
                    <a class="btn btn-left-menu left-menu-link-text" @onclick=IndexEvent>Index</a>
                </dev>
            </nav>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback ShowIndex { get; set; }
    [Parameter] public string? DbName { get; init; }

    [Inject] private ConfigurationService _configurationService { get; init; } = null!;
    [Inject] private ILogger<LeftOverviewIndex> _logger { get; init; } = null!;

    private SequentialState _flow = new SequentialState();
    private IReadOnlyList<IndexMap> _indexMap = Array.Empty<IndexMap>();
    private NBlogConfiguration _configuration = null!;

    private async Task IndexEvent() => await ShowIndex.InvokeAsync();

    public string _title = "";
    public IReadOnlyList<string> _lines = [""];


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _flow.Reset();
            await Load();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        if (!_flow.MoveState(1)) return;
        var context = new ScopeContext(_logger);

        try
        {
            if (DbName == null) return;
            _configuration = await _configurationService.Get(DbName, context);

            _title = _configuration.OverviewPanel.Title;
            _lines = _configuration.OverviewPanel.Lines.ToArray();

            _indexMap = _configuration.OverviewPanel.Menus
                .OrderBy(x => x.OrderIndex)
                .Select(x => new IndexMap
                    {
                        Title = x.Title,
                        SvcCommand = CreateSvg(x.IconName, x.IconColor),
                        HRef = x.HRef,
                    })
                .ToArray();
        }
        finally
        {
            _flow.MoveState(2);
            await InvokeAsync(() => StateHasChanged());
        }
    }


    private static string CreateSvg(string iconName, string color)
    {
        return $"<svg class=\"bi me-2 f5\" style=\"color: {color} !important\"><use xlink:href=#{iconName}></use></svg>";
    }

    private record IndexMap
    {
        public required string Title { get; init; }
        public required string SvcCommand { get; init; }
        public required string HRef { get; init; }
    }
}
@using NBlog.sdk
@using Toolbox.Types
@rendermode InteractiveServer

@if (_docFileId != null)
{
    <a href="@_docFileId" class="text-decoration-none text-info">
        <h2>@_title</h2>
    </a>
}
else
{
    <h2>@_title</h2>
}

<div class="d-flex align-items-center mt-3">
    <span class="d-flex align-items-center">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" class="me-2" viewBox="0 0 16 16" role="img" fill="currentColor">
            <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path>
            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"></path>
        </svg>
        @_date
    </span>
</div>

<div class="mt-3">
    @((MarkupString)_html)
</div>

@code {
    [Parameter]
    public string ArticleId { get; init; } = null!;

    [Inject]
    private ArticleService _articleService { get; init; } = null!;

    [Inject]
    private ILogger<ArticleSummary> _logger { get; init; } = null!;

    private ArticleDetail _articleDetail { get; set; } = null!;
    private int _running;
    private string _title { get; set; } = string.Empty;
    private string _html { get; set; } = string.Empty;
    private string _date { get; set; } = string.Empty;
    private string? _docFileId { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _running = 0;

        await Load();
        await base.OnParametersSetAsync();
    }

    private async Task Load()
    {
        var context = new ScopeContext(_logger);
        int currentRunnning = Interlocked.CompareExchange(ref _running, 1, 0);
        if (currentRunnning == 1) return;

        try
        {
            var mdDoc = await _articleService.ReadArticleDetail(ArticleId, NBlogConstants.SumaryAttribute, context);
            if (mdDoc.IsError())
            {
                _title = mdDoc.ToString();
                await base.OnParametersSetAsync();
            }

            _articleDetail = mdDoc.Return();
            _title = _articleDetail.Manifest.Title;
            _html = _articleDetail.MarkdownDoc.ToHtml();
            _date = _articleDetail.Manifest.CreatedDate.ToString("MMMM dd, yyyy");

            var commandNode = _articleDetail.Manifest.GetCommand(NBlogConstants.MainAttribute);
            if (commandNode.IsOk())
            {
                _docFileId = NavRoutes.GotoArticle(ArticleId);
            }
        }
        finally
        {
            await InvokeAsync(() => StateHasChanged());
        }
    }
}
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Toolbox.Tools;

@if (_flow.State == 1)
{
    @switch (_showIndex)
    {
        case false:
            <LeftOverviewIndex ShowIndex="OnShowIndex" />
            break;

        case true:
            <LeftContextIndex ShowIndex="OnShowIndex" />
            break;
    }
}

@code {
    @inject ProtectedSessionStorage _store;

    private bool _showIndex { get; set; }
    private SequentialState _flow = new SequentialState();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _flow.MoveState(1);
            await SetShowIndex();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnShowIndex()
    {
        _showIndex = !_showIndex;
        await _store.SetAsync(nameof(_showIndex), _showIndex);
    }

    private async Task SetShowIndex()
    {
        var result = await _store.GetAsync<bool>(nameof(_showIndex));
        _showIndex = result.Success ? result.Value : false;
    }
}
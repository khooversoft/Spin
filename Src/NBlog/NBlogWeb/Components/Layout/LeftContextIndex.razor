@using NBlog.sdk
@using Toolbox.Types
@rendermode InteractiveServer

<Symbols />

<div class="bd-sidebar">
    <div class="masthead pt-5">
        <div class="mb-4 text-lg-start">
            <div class="ms-3 ms-lg-0">
                <h3 class="mb-1 mb-lg-2 f1 fw-600">Secrets of .NET and Cloud</h3>
            </div>
        </div>

        <nav class="nav nav-pills justify-content-center flex-lg-column justify-content-lg-start index-backto-home">
            <dev class="nav-link d-flex align-items-center fw-600">
                <svg class="bi me-2 f5 text-success"><use xlink:href="#arrow-left-square"></use></svg>
                <a class="btn btn-left-menu text-info" @onclick=IndexEvent>Back to overview</a>
            </dev>
        </nav>

        @if (_running == 2)
        {
            @foreach (var group in _indexMap)
            {
                <dev class="nav nav-pills justify-content-center flex-lg-column justify-content-lg-start left-menu-group-content">
                    <dev class="left-menu-format nav-link d-flex align-items-center fw-600">
                        @((MarkupString)group.SvcCommand)
                        <span class="left-menu-group">@group.GroupName</span>
                    </dev>
                </dev>

                @foreach (var link in group.Items)
                {
                    <div class="left-menu-format nav-link d-flex align-items-center fw-600">
                        <a href=@link.ArticleLink>
                            <span class="btn btn-left-menu left-menu-topic"> @link.Topic </span>
                        </a>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback ShowIndex { get; set; }

    [Inject]
    private ArticleService _articleService { get; init; } = null!;

    [Inject]
    private ConfigurationService _configurationService { get; init; } = null!;

    [Inject]
    private ILogger<LeftContextIndex> _logger { get; init; } = null!;

    private int _running;
    private IReadOnlyList<ArticleIndex>? _indexes { get; set; }
    private IReadOnlyList<IndexMap> _indexMap { get; set; } = Array.Empty<IndexMap>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _running = 0;
            await Load();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task IndexEvent()
    {
        await ShowIndex.InvokeAsync();
    }

    private async Task Load()
    {
        var context = new ScopeContext(_logger);
        int currentRunnning = Interlocked.CompareExchange(ref _running, 1, 0);
        if (currentRunnning == 1) return;

        try
        {
            _indexes = await _articleService.GetIndexDocs(context);

            _indexMap = _indexes
                .Select(x => (group: unwrap(x.IndexName), index: x))
                .GroupBy(x => x.group.groupName)
                .Select(x => new IndexMap
                    {
                        GroupName = x.Key,
                        Items = x.GroupBy(y => y.group.topic)
                            .Select(x => (x.Key, NavRoutes.GotoSummary(x.First().index.IndexName)))
                            .ToArray(),
                        SvcCommand = "r",
                    })
                .ToArray();

            var groupNames = _indexes.Select(x => unwrap(x.IndexName).groupName).ToArray();
            var iconGroups = await _configurationService.Lookup(groupNames, context);
            var iconDict = iconGroups.ToDictionary(x => x.GroupName, x => x, StringComparer.OrdinalIgnoreCase);

            _indexMap = _indexMap
                .Select(x => x with { SvcCommand = createSvc(x.GroupName) })
                .ToArray();


            string createSvc(string groupName)
            {
                (string iconName, string color) = iconDict.TryGetValue(groupName, out var indexGroup) ?
                    (indexGroup.IconName, indexGroup.IconColor) :
                    ("moon - stars - fill", "white");

                return $"<svg class=\"bi me-2 f5\" style=\"color: {color} !important\"><use xlink:href=#{iconName}></use></svg>";
            }
        }
        finally
        {
            _running = 2;
            await InvokeAsync(() => StateHasChanged());
        }

        static (string groupName, string topic) unwrap(string indexName)
        {
            var parts = indexName.Split('/');
            return (parts[0], parts[1]);
        }
    }

    private record IndexMap
    {
        public required string GroupName { get; init; }
        public required string SvcCommand { get; init; }
        public required IReadOnlyList<(string Topic, string ArticleLink)> Items { get; init; }
    }
}
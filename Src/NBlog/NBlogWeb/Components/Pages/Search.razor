@page "/search/{searchString}"
@layout Layout.MainLayout

@using NBlog.sdk
@using NBlogWeb.Components.Layout
@using Toolbox.Extensions
@using Toolbox.Types
@rendermode InteractiveServer

@if (_manifests != null && _running == 2)
{
    <div class="container p-0 mt-4">
        <div class="row p-2">
            <div class="col-md-2">
                <label class="text-white-50">Searching for:</label>
            </div>
            <div class="col-md-10 search-box">
                <span class="text-white">@_title</span>
            </div>
        </div>
    </div>

    @foreach (var manifest in _manifests.WithIndex())
    {
        <ArticleSummary ArticleId="@manifest.Item.ArticleId" Index="@manifest.Index" />
    }
}
else
{
    <LoadingComponent Size="1" />
}


@code {
    [Parameter]
    public string SearchString { get; init; } = null!;

    [Inject]
    private SearchService _searchService { get; init; } = null!;

    [Inject]
    private ILogger<Home> _logger { get; init; } = null!;

    private IReadOnlyList<ArticleManifest>? _manifests { get; set; } = null!;
    private int _running;
    private string _title = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _running = 0;
            await Load();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        int currentRunnning = Interlocked.CompareExchange(ref _running, 1, 0);
        if (currentRunnning == 1) return;
        var context = new ScopeContext(_logger);

        try
        {
            string search = Uri.UnescapeDataString(SearchString);
            _title = search;

            _manifests = await _searchService.Search(search, context);
        }
        finally
        {
            _running = 2;
            await InvokeAsync(() => StateHasChanged());
        }
    }
}

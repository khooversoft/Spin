@page "/Channel/{ChannelId}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using System.Collections.Frozen
@using TicketShare.sdk
@using Toolbox.Graph.Extensions

<LoadingBlock Loading=@_loading />

<FeedColumn>
    <DialogControls OnClose="OnClose" />
    <FluentLabel Typo=Typography.Body>@_wellcome</FluentLabel>

    @foreach (var item in _messageList)
    {
        <ChannelMessageBlock Content=item />
    }

    @if (_principalId is not null)
    {
        <TextEditorBlock YesText="Send" OnYes="SendMessage" />
    }

</FeedColumn>

@code {
    [Parameter] public string ChannelId { get; set; } = null!;
    @inject UserAccountContext _userAccountContext;
    @inject ApplicationNavigation _appNavigation;
    @inject ChannelClient _channelClient;
    @inject ILogger<ChannelPage> _logger;

    private string _wellcome = "Wellcome";
    private ChannelContext _channelContext;
    private bool _loading { get; set; } = true;
    private IReadOnlyList<ChannelMessage> _messageList = [];
    private string _principalId = null!;
    private ScopeContext _context;

    protected override void OnParametersSet()
    {
        _context = new ScopeContext(_logger);
        _wellcome = $"Wellcome to channel {ChannelId}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _principalId = (await _userAccountContext.GetPrincipalIdentity(_context).ConfigureAwait(false))
                .ThrowOnError()
                .Return().PrincipalId.NotEmpty();

            _channelContext = _channelClient.GetContext(ChannelId, _principalId);

            await Refresh();

            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnClose() => _appNavigation.GotoChannels();

    private async Task SendMessage(string message)
    {
        var channelMessage = new ChannelMessage
            {
                ChannelId = ChannelId,
                FromPrincipalId = _principalId,
                Message = message,
                Links = new Dictionary<string, string>()
                {
                    ["Channel"] = ApplicationUri.GetChannel(ChannelId),
                }.ToFrozenDictionary(),
            };

    var result = await _channelContext.AddMessage(channelMessage, new ScopeContext(_logger));
        if (result.IsError())
        {
            _logger.LogError("Failed to send message to channelId={channelId}", ChannelId);
            _appNavigation.GotoHome();
            return;
        }

        await Refresh();
    }

    private async Task Refresh()
    {
        var listOption = await _channelContext.GetMessages(new ScopeContext(_logger));
        _messageList = listOption.IsOk() switch
        {
            true => listOption.Return(),
            false => [],
        };
    }
}

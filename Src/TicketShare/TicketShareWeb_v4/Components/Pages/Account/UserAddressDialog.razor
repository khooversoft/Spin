@using TicketShare.sdk
@using TicketShareWeb.Application

@implements IDialogContentComponent<PanelParameters<AddressModel>>

<FluentDialogBody>
    <DialogFrame OnClose="OnCloseButton" OnSet="OnSetButton" OnDelete="OnDeleteButton" ShowDelete="Content.IsEdit" DisableSave="_disableSave">

        <FluentTextField Name="Label" Label="Label" @bind-Value="Content.Value.Label" Class="form-editbox"
                         Placeholder="label like 'home', 'office'" @oninput="OnLabelChange" />

        <FluentTextField Name="Address1" Label="Address" @bind-Value="Content.Value.Address1" Class="form-editbox"
                         Placeholder="address" @oninput="OnAddress1Change" />

        <FluentTextField Name="Address2" Label="Address" @bind-Value="Content.Value.Address2" Class="form-editbox"
                         Placeholder="address" @oninput="OnAddress2Change" />

        <FluentTextField Name="City" Label="City" @bind-Value="Content.Value.City" Class="form-editbox"
                         Placeholder="city" @oninput="CityChange" />

        <FluentTextField Name="State" Label="State" @bind-Value="Content.Value.State" Class="form-editbox"
                         Placeholder="state" @oninput="StateChange" />

        <FluentTextField Name="ZipCode" Label="Zip Code" @bind-Value="Content.Value.ZipCode" Class="form-editbox"
                         Placeholder="zip code" @oninput="ZipCodeChange" />

    </DialogFrame>
</FluentDialogBody>

@code {
    [Parameter] public PanelParameters<AddressModel> Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = null!;

    private bool _disableSave = true;
    private AddressModel _current = default!;

    protected override void OnParametersSet()
    {
        _current = Content.Value.Clone();
        base.OnParametersSet();
    }

    private async Task OnSetButton() => await Dialog.CloseAsync(PanelResult<AddressModel>.Set(Content.Value));
    private async Task OnDeleteButton() => await Dialog.CloseAsync(PanelResult<AddressModel>.Delete());
    public async Task OnCloseButton() => await Dialog.CancelAsync();

    private void OnLabelChange(ChangeEventArgs e) => Update(() => Content.Value.Label = e.Value?.ToString() ?? Content.Value.Label);
    private void OnAddress1Change(ChangeEventArgs e) => Update(() => Content.Value.Address1 = e.Value?.ToString() ?? Content.Value.Address1);
    private void OnAddress2Change(ChangeEventArgs e) => Update(() => Content.Value.Address2 = e.Value?.ToString() ?? Content.Value.Address2);
    private void CityChange(ChangeEventArgs e) => Update(() => Content.Value.City = e.Value?.ToString() ?? Content.Value.City);
    private void StateChange(ChangeEventArgs e) => Update(() => Content.Value.State = e.Value?.ToString() ?? Content.Value.State);
    private void ZipCodeChange(ChangeEventArgs e) => Update(() => Content.Value.ZipCode = e.Value?.ToString() ?? Content.Value.ZipCode);

    private void Update(Action update)
    {
        update();

        _disableSave = Content.IsEdit switch
        {
            true => !HasDataRequired() || Content.Value == _current,
            false => !HasDataRequired()
        };
    }

    private bool HasDataRequired() => Content.Value.HasAddress;
}!
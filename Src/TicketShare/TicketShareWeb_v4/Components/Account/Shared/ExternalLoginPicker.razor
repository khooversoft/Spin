@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.Collections.Frozen
@using Toolbox.Graph.Extensions

@inject SignInManager<PrincipalIdentity> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured.
        </p>
    </div>
}
else
{
    <form style="margin-top: 20px" class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <h4>Select service to log in...</h4>

            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <p>
                @foreach (var provider in externalLogins)
                {
                    ProviderTheme theme = Theme.Get(provider.Name);

                    <FluentButton Style="width:100%; min-width:380px; margin-bottom: 10px;"
                                  Type="ButtonType.Submit"
                                  BackgroundColor="@theme.BackgroundColor"
                                  Color="@theme.Color"
                                  Appearance="Appearance.Accent"
                                  Name="provider"
                                  Value="@provider.Name"
                                  Title="@($"Log in using your {provider.DisplayName} account")">@provider.DisplayName</FluentButton>

                    <text>&nbsp;</text>
                }
            </p>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

    public record ProviderTheme(string Provider, string BackgroundColor, string Color);

    internal static class Theme
    {
        public static ProviderTheme Get(string provider) => ProviderThemes.TryGetValue(provider, out var theme) ? theme : _defaultTheme;

        public static ProviderTheme _defaultTheme { get; } = new ProviderTheme("default", "#FFFFFF", "#000000");

        public static IReadOnlyDictionary<string, ProviderTheme> ProviderThemes = new[]{
                new ProviderTheme("Microsoft", "#CCF4DD", "black"),
            }.ToFrozenDictionary(x => x.Provider);
    }
}

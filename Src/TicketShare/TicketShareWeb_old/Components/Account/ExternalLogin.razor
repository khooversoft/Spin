@page "/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Toolbox.Orleans
@using Toolbox.Tools
@using Toolbox.Identity;
@using TicketShareWeb.Application;

@inject SignInManager<PrincipalIdentity> SignInManager
@inject UserManager<PrincipalIdentity> UserManager
@inject IUserStore<PrincipalIdentity> UserStore
@* @inject IEmailSender<PrincipalIdentity> EmailSender *@
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

<PageTitle>Register</PageTitle>

<div style="margin: 10px;max-width: 500px;">
    <h1>User</h1>

    <div style="margin-top:10px" class="alert alert-success">
        You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
        Please enter an email address for this site below and click the Register button to finish
        logging in.
    </div>

    <ErrorStatusMessage Message="@message" />

    <div style="margin-top:20px">
        <FluentGrid>
            <FluentGridItem xs="12" sm="12">
                <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
                    <DataAnnotationsValidator />
                    <FluentValidationSummary class="text-danger" role="alert" />

                    <div style="margin-top:10px">
                        <FluentTextField Name="Input.Name" @bind-Value="Input.Name" AutoComplete="name" Placeholder="Please enter your name." Label="Name" Style="width: 100%;" />
                        <FluentValidationMessage For="() => Input.Name" />
                    </div>

                    <div style="margin-top:10px">
                        <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="email" Placeholder="Please enter your email." Label="Email" Style="width: 100%;" />
                        <FluentValidationMessage For="() => Input.Email" />
                    </div>
                    <div style="margin-top:10px">
                        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">Register</FluentButton>
                    </div>
                </EditForm>
            </FluentGridItem>
        </FluentGrid>
    </div>
</div>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // If the user does not have an account, then ask the user to create an account.
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Name))
        {
            Input.Name = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Name) ?? "";
        }
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var user = CreateUser(Input.Email, Input.Name);

        await UserStore.SetUserNameAsync(user, user.UserName, CancellationToken.None);

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);
                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        if (result.Errors.Where(x => x.Code == "DuplicateUserName").Any())
        {
            await UserManager.AddLoginAsync(user, externalLoginInfo);
            await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }

    public class A : IdentityUser
    {
    }

    private PrincipalIdentity CreateUser(string email, string name)
    {
        try
        {
            string externalLogonEmail = externalLoginInfo.Principal
                .FindFirstValue(ClaimTypes.Email)
                .NotNull("Email claim not found")
                .Trim()
                .ToLower();

            var subject = Activator.CreateInstance<PrincipalIdentity>() with
                {
                    PrincipalId = externalLogonEmail,
                    UserName = externalLogonEmail,
                    Email = email,
                    Name = name,
                    EmailConfirmed = true,
                };

            return subject;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(PrincipalIdentity)}'. " +
                $"Ensure that '{nameof(PrincipalIdentity)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
    }
}

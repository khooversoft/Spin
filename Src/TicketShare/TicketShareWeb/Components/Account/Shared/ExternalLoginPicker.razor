@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Toolbox.Identity

@inject SignInManager<PrincipalIdentity> SignInManager
@inject IdentityRedirectManager RedirectManager

<FluentGrid Style="margin-top: 20px">
    <FluentGridItem xs="12" sm="8">
        @if (externalLogins.Length == 0)
        {
            <div>
                <p>
                    There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">
                        article
                        about setting up this ASP.NET application to support logging in via external services
                    </a>.
                </p>
            </div>
        }
        else
        {
            <form style="margin-top: 20px" class="form-horizontal" action="Account/PerformExternalLogin" method="post">
                <div>
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    @foreach (var provider in externalLogins)
                    {
                        <FluentButton Style="width:100%; margin-bottom: 10px;"
                                      Type="ButtonType.Submit"
                                      BackgroundColor="#CCF4DD"
                                      Color="black"
                                      Appearance="Appearance.Accent"
                                      Value="@provider.Name"
                                      Name="provider"
                                      Title="@($"Log in using your {provider.DisplayName} account")">@provider.DisplayName</FluentButton>
                    }
                </div>
            </form>
        }
    </FluentGridItem>
</FluentGrid>

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Toolbox.Orleans
@using TicketShareWeb.Application;

@inject SignInManager<PrincipalIdentity> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">
                article
                about setting up this ASP.NET application to support logging in via external services
            </a>.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <div class="row-provider">
                @foreach (var provider in externalLogins)
                {
                    <FluentButton class="x-btn"
                                  Type="ButtonType.Submit"
                                  BackgroundColor="#CCF4DD"
                                  Color="black"
                                  Appearance="Appearance.Accent"
                                  Name="provider"
                                  Value="@provider.Name"
                                  Title="@($"Log in using your {provider.DisplayName} account")">@provider.DisplayName</FluentButton>
                }
            </div>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}

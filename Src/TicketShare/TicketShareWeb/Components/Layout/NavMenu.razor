@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Http.Extensions;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.Extensions.Primitives;
@using Toolbox.Identity;

@implements IDisposable

@inject NavigationManager NavigationManager

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu" onclick="document.getElementById('navmenu-toggle').click();">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>

            <AuthorizeView>
                <Authorized>
                    <FluentNavLink Href="Tickets" Icon="@(new Icons.Regular.Size20.TicketDiagonal())" IconColor="Color.Accent">Tickets</FluentNavLink>
                    <FluentNavLink Href="Messages" Icon="@(new Icons.Regular.Size20.Comment())" IconColor="Color.Accent">Messages</FluentNavLink>
                    <FluentNavLink Href="Account" Icon="@(new Icons.Regular.Size20.PersonAccounts())">Account</FluentNavLink>

                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <FluentButton Class="left-justified-button"
                        Type="ButtonType.Submit"
                        IconStart="@(new Icons.Regular.Size20.SignOut())"
                        Appearance="Appearance.Neutral"
                        style="margin: 10px 0 10px 0; width: 100%">
                            Logout
                        </FluentButton>
                    </form>
                </Authorized>

            </AuthorizeView>
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
    private string? currentUrl;
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        expanded = authState.User.Identity?.IsAuthenticated == true;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


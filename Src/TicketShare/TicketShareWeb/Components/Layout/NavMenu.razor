@using TicketShareWeb.Components.Account.Shared

@implements IDisposable

@* @inject NavigationManager NavigationManager *@

<AuthorizeView>
    <Authorized>
        <div class="navmenu">
            <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
            <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
            <nav class="sitenav" aria-labelledby="main-menu" onclick="document.getElementById('navmenu-toggle').click();">
                <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded">
                    <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>

                    <FluentNavGroup Title="Partnerships" Tooltip="List of engagements" Icon="@(new Icons.Regular.Size24.EarthLeaf())">
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafOne())" Tooltip="Manage my profile"></FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafTwo())" Tooltip="Manage by availability">Calendar</FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafTwo())" Tooltip="Manage by availability">Tickets</FluentNavLink>
                    </FluentNavGroup>

                    <FluentNavGroup Title="Ticket" Tooltip="Tickets Management" Icon="@(new Icons.Regular.Size24.EarthLeaf())">
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafOne())" Tooltip="Manage assigned tickets">Assigned</FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafTwo())" Tooltip="Manage availability tickets">Available</FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafTwo())" Tooltip="Assign a ticket to another account">Assign Ticket</FluentNavLink>
                    </FluentNavGroup>

                    <FluentNavGroup Title="Teams" Tooltip="Team Management" Icon="@(new Icons.Regular.Size24.EarthLeaf())">
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafOne())" Tooltip="Manage Teams">Teams</FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafTwo())" Tooltip="Manage Games">Games</FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size24.LeafTwo())" Tooltip="League">Leagues</FluentNavLink>
                    </FluentNavGroup>

                    <div style="margin-top:20px">
                        <FluentNavLink Href="Account/UserProfile">@context.User.Identity?.Name</FluentNavLink>

                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <FluentButton Type="ButtonType.Submit" Style="width: 100%">Logout</FluentButton>
                        </form>
                        @*                     <NotAuthorized>
                        <ExternalLoginPicker />
                        <FluentNavLink Href="Account/Login">Login</FluentNavLink>
                        </NotAuthorized> *@
                    </div>
                </FluentNavMenu>
            </nav>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    private bool expanded = true;

    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


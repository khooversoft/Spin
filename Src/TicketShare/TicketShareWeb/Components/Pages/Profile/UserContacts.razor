@rendermode InteractiveServer

@using Microsoft.FluentUI.AspNetCore.Components;
@using TicketShareWeb.Application
@using TicketShareWeb.Components.Pages.Profile.Models

@if (_contacts is not null)
{
    <FeedBlock Title="Contacts" Class="feed-block-datagrid" OnAdd="Add">
        <FluentDataGrid Class="feed-block-datagrid"
                        Items="@_contacts"
                        GridTemplateColumns="70px 300px"
                        ShowHover="true"
                        GenerateHeader=GenerateHeaderOption.None
                        TGridItem="ContactModel"
                        OnRowClick="HandleRowFocus">
            <PropertyColumn Property="@(p => p.Type)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Value)" Sortable="true" />
        </FluentDataGrid>
    </FeedBlock>
}


@code {
    [Inject] public IDialogService _dialogService { get; set; } = null!;
    [CascadingParameter] public UserAccountContext UserAccountContext { get; set; } = null!;

    IDialogReference _dialog = null!;
    private IQueryable<ContactModel> _contacts = null!;

    protected override void OnParametersSet() => Refresh();
    private Task HandleRowFocus(FluentDataGridRow<ContactModel> row) => Edit(row.Item.NotNull());

    private async Task Edit(ContactModel model)
    {
        var parameters = new DialogParameters()
            {
                Alignment = HorizontalAlignment.Right,
                ShowDismiss = true,
                Title = "Edit Contact",
                PrimaryAction = null,
                SecondaryAction = null,
            };

        var panelParameters = new PanelParameters<ContactModel>(model, true);
        _dialog = await _dialogService.ShowPanelAsync<UserContactDialog>(panelParameters, parameters);

        var result = await _dialog.Result;
        if (result.Cancelled || result.Data is null || result.Data is not PanelResult<ContactModel> data) return;

        if (data.DoDelete)
        {
            await UserAccountContext.Contact.Delete(model);
        }
        else
        {
            await UserAccountContext.Contact.Set(data.Value.NotNull());
        }

        _contacts = UserAccountContext.Input.ContactItems.Values.OrderBy(x => x.Value).AsQueryable();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Add()
    {
        var model = new ContactModel { Type = "Email", Value = "" };
        var parameters = new DialogParameters<ContactModel>()
            {
                Content = model,
                Alignment = HorizontalAlignment.Right,
                ShowDismiss = true,
                Title = "Add Contact",
                PrimaryAction = null,
                SecondaryAction = null,
            };

        var panelParameters = new PanelParameters<ContactModel>(model);
        _dialog = await _dialogService.ShowPanelAsync<UserContactDialog>(panelParameters, parameters);
        var result = await _dialog.Result;
        if (result.Cancelled || result.Data is null || result.Data is not PanelResult<ContactModel> data) return;

        await UserAccountContext.Contact.Set(data.Value.NotNull());

        Refresh();
        await InvokeAsync(StateHasChanged);
    }

    public void Refresh()
    {
        _contacts = UserAccountContext.Input.ContactItems.Values.OrderBy(x => x.Value).AsQueryable();
    }
}

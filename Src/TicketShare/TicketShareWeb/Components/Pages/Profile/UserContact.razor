@rendermode InteractiveServer

@using Microsoft.FluentUI.AspNetCore.Components

@if (_contacts is not null)
{
    <FeedBlock Title="Contact" Class="feed-block-datagrid">
        <FluentDataGrid Class="feed-block-datagrid" Items="@_contacts" GridTemplateColumns="70px 240px 80px" GenerateHeader=GenerateHeaderOption.None>
            <PropertyColumn Property="@(p => p.Type)" />
            <PropertyColumn Property="@(p => p.Value)" />
            <TemplateColumn>
                <FluentButton
                    IconStart="@(new Icons.Regular.Size20.Edit())"
                    onclick="() => Edit(context)" />
            </TemplateColumn>
        </FluentDataGrid>
    </FeedBlock>
}


@code {
    [Inject] public IDialogService _dialogService { get; set; } = null!;
    [Parameter] public InputModel InputModel { get; set; } = null!;

    IDialogReference _dialog = null!;

    static List<Fluent.Option<string>> _validTypes = new()
    {
        new Fluent.Option<string> { Value = "Email", Text = "Email" },
        new Fluent.Option<string> { Value = "Phone", Text = "Phone" },
    };

    private IQueryable<ContactModel> _contacts = null!;

    protected override void OnParametersSet()
    {
        _contacts = InputModel.ContactItems.Values.AsQueryable();
        base.OnParametersSet();
    }

    private async Task Edit(ContactModel selectedModel)
    {
        selectedModel.NotNull();
        await OpenPanelRightAsync(selectedModel);
    }

    private async Task OpenPanelRightAsync(ContactModel model)
    {
        var parameters = new DialogParameters<DialogResultState<ContactModel>>()
            {
                Content = new DialogResultState<ContactModel>(model),
                Alignment = HorizontalAlignment.Right,
                ShowDismiss = true,
                Title = "Edit Contact",
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                PrimaryAction = null,
                SecondaryAction = null,
            };

        _dialog = await _dialogService.ShowPanelAsync<EditUserContactDialog>(model, parameters);

        var result = await _dialog.Result;
        HandlePanel(result);
    }

    private void HandlePanel(DialogResult result)
    {
        if (result.Cancelled || result.Data is null) return;

        var data = result.Data as DialogResultState<ContactModel>;
        if (data is null) return;

        if (data.IsDelete)
        {

        }
    }
}

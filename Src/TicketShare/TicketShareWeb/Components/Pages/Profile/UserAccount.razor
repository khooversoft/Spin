@page "/UserAccount"
@attribute [Authorize]

@using TicketShareWeb.Application
@using TicketShareWeb.Components.Pages.Profile.Models
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using TicketShare.sdk
@using Toolbox.Identity

@rendermode InteractiveServer

<PageTitle>Account</PageTitle>

@if (_input != null)
{
    <div style="border: 1px solid black; ">
        <FluentStack Orientation="Orientation.Vertical">
            <FeedBlock Title="User" OnEdit="OnEditInfo">
                <EditInfo Content="@_userProfileModel" ReadOnly="true" />
            </FeedBlock>

            <UserContact InputModel="_input" OnUpdate="UpdateAccountData" />
        </FluentStack>
    </div>
}

@code {
    [Inject] public ILogger<UserAccount> _logger { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public UserAccountManager _userAccountManager { get; set; } = null!;
    [Inject] public IDialogService _dialogService { get; set; } = null!;

    private InputModel _input { get; set; } = null!;
    private InputModel _currentStored = null!;
    private UserProfileModel _userProfileModel = null!;

    private bool IsChanged() => _input != null && _currentStored != null && (_input != _currentStored);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReadAccountData();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateAccountData()
    {
        if (!IsChanged()) return;

        string principalId = await _userAccountManager.GetPrincipalId().ConfigureAwait(false);

        _logger.LogInformation("Updating account, Input={input}", _input.ToJson());
        var account = _input.NotNull().ConvertTo(principalId);

        var result = await _userAccountManager.SetAccount(account).ConfigureAwait(false);
        if (result.IsError()) return;

        _input = null!;
        StateHasChanged();
    }

    private async Task ReadAccountData()
    {
        if (_input != null) return;

        var accountOption = await _userAccountManager.GetAccount().ConfigureAwait(false);
        accountOption.ThrowOnError(nameof(OnInitializedAsync));

        _input = accountOption.Return().ConvertTo();
        _currentStored = _input.Clone();
        _userProfileModel = new UserProfileModel { Name = _input.Name };

        string json = _input.ToJson();
        _logger.LogInformation("Account read, Input={input}", json);
    }

    private async Task OnEditInfo()
    {
        var userProfile = new UserProfileModel { Name = _input.Name };

        var parameters = new DialogParameters<UserProfileModel>()
            {
                Content = _userProfileModel,
                Alignment = HorizontalAlignment.Right,
                ShowDismiss = true,
                Title = "User",
            };

        var dialog = await _dialogService.ShowPanelAsync<EditInfoDialog>(_userProfileModel, parameters);
        var result = await dialog.Result;
        if (result.Cancelled || result.Data is null) return;

        if (result.Data is not UserProfileModel userProfileModel) return;
        _input = _input with { Name = userProfileModel.Name };

        await UpdateAccountData();
    }
}

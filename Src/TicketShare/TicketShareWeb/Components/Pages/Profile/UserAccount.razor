@page "/UserAccount"
@attribute [Authorize]

@using TicketShareWeb.Application
@using TicketShareWeb.Components.Pages.Profile.Models
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using TicketShare.sdk
@using Toolbox.Identity

@rendermode InteractiveServer

<PageTitle>Account</PageTitle>

@if (_userAccountContext?.IsLoaded() == true)
{
    <div style="border: 1px solid black; ">
        <FluentStack Orientation="Orientation.Vertical">
            <FeedBlock Title="User" OnEdit="OnEditInfo">
                <EditInfo Content="@_userAccountContext.UserProfile" ReadOnly="true" />
            </FeedBlock>

            <CascadingValue Value="_userAccountContext">
                <UserContact />
            </CascadingValue>
        </FluentStack>
    </div>
}

@code {
    [Inject] public ILogger<UserAccount> _logger { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public UserAccountManager _userAccountManager { get; set; } = null!;
    [Inject] public IDialogService _dialogService { get; set; } = null!;

    private UserAccountContext _userAccountContext = null!;

    protected override void OnInitialized()
    {
        _userAccountContext = new UserAccountContext(_userAccountManager, _logger);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _userAccountContext.Get();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnEditInfo()
    {
        var userProfile = new UserProfileEditModel { Name = _userAccountContext.Input.Name };

        var parameters = new DialogParameters()
            {
                Alignment = HorizontalAlignment.Right,
                ShowDismiss = true,
                Title = "User",
                PrimaryAction = null,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                SecondaryAction = null,
            };

        var dialog = await _dialogService.ShowPanelAsync<EditInfoDialog>(userProfile, parameters);
        var result = await dialog.Result;
        if (result.Cancelled || result.Data is null) return;

        if (result.Data is not UserProfileEditModel userProfileModel) return;

        await _userAccountContext.SetName(userProfileModel.Name);
        StateHasChanged();
    }
}

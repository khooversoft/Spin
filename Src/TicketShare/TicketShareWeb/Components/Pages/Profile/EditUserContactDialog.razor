@implements IDialogContentComponent<ContactModel>

<FluentDialogBody>

    <FluentSelect Items=@_validTypes
                  Label="Contact Type:"
                  OptionText="@(i => i.Text)"
                  OptionValue="@(i => i.Value)"
                  OptionSelected="@(i => i.Selected)"
                  @bind-Value="@Content.Type" />

    <FluentTextField Class="dialog-editbox" @bind-Value="@Content.Value">Value:</FluentTextField>

    <hr />

    <FluentStack Orientation="Orientation.Horizontal">
        <FluentButton Appearance="Appearance.Outline"
                      IconStart="@(new Icons.Regular.Size20.Save())"
                      OnClick="SetClick">
            Save
        </FluentButton>

        <FluentButton Appearance="Appearance.Outline"
                      IconStart="@(new Icons.Regular.Size20.Delete())"
                      OnClick="DeleteClick">
            Delete
        </FluentButton>

        <FluentButton Appearance="Appearance.Outline"
                      IconStart="@(new Icons.Regular.Size20.ArrowUndo())"
                      OnClick="CloseClick">
            Close
        </FluentButton>
    </FluentStack>
</FluentDialogBody>

@code {
    [Parameter] public ContactModel Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog _dialog { get; set; } = null!;

    static List<Fluent.Option<string>> _validTypes = new()
    {
        new Fluent.Option<string> { Value = "Email", Text = "Email" },
        new Fluent.Option<string> { Value = "Phone", Text = "Phone" },
    };

    private async Task CloseClick()
    {
        await _dialog.CancelAsync();
    }

    private async Task SetClick()
    {
        var resultContent = new DialogResultState<ContactModel>(Content);
        var result = DialogResult.Ok<DialogResultState<ContactModel>>(resultContent);
        await _dialog.CloseAsync(result);
    }

    private async Task DeleteClick()
    {
        var resultContent = new DialogResultState<ContactModel>(Content, true);
        var result = DialogResult.Ok<DialogResultState<ContactModel>>(resultContent);
        await _dialog.CloseAsync(result);
    }
}
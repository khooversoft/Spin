@using TicketShareWeb.Components.Pages.Profile.Models

@implements IDialogContentComponent<PanelParameters<AddressModel>>

<FluentDialogBody>

    <DialogControls OnSet="OnSetButton" OnClose="OnCloseButton" OnDelete="EnableDelete" ShowDelete="@Content.ShowDelete" />

    <FluentTextField Name="Label" Label="Label" @bind-Value="Content.Value.Label" Class="form-editbox"
                     Placeholder="label like 'home', 'office'" @oninput="OnLabelChange" />

    <FluentTextField Name="Address1" Label="Address" @bind-Value="Content.Value.Address1" Class="form-editbox"
                     Placeholder="address" @oninput="OnAddress1Change" />

    <FluentTextField Name="Address2" Label="Address" @bind-Value="Content.Value.Address2" Class="form-editbox"
                     Placeholder="address" @oninput="OnAddress2Change" />

    <FluentTextField Name="City" Label="City" @bind-Value="Content.Value.City" Class="form-editbox"
                     Placeholder="city" @oninput="CityChange" />

    <FluentTextField Name="State" Label="State" @bind-Value="Content.Value.State" Class="form-editbox"
                     Placeholder="state" @oninput="StateChange" />

    <FluentTextField Name="ZipCode" Label="Zip Code" @bind-Value="Content.Value.ZipCode" Class="form-editbox"
                     Placeholder="zip code" @oninput="ZipCodeChange" />

    @if (_disableDelete)
    {
        <Ask IsAlert="true" OnYes="OnDeleteButton" OnNo="ClearDelete" Message="Do you want to delete this contact?"></Ask>
    }

</FluentDialogBody>

@code {
    [Parameter] public PanelParameters<AddressModel> Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = null!;

    private bool _disableDelete = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private async Task OnSetButton()
    {
        if (!Content.Value.HasAddress)
        {
            await Dialog.CancelAsync();
            return;
        }

        await Dialog.CloseAsync(PanelResult<AddressModel>.Set(Content.Value));
    }

    private async Task OnDeleteButton() => await Dialog.CloseAsync(PanelResult<AddressModel>.Delete());
    public async Task OnCloseButton() => await Dialog.CancelAsync();

    private void OnLabelChange(ChangeEventArgs e) => Content.Value.Label = e.Value?.ToString() ?? Content.Value.Label;
    private void OnAddress1Change(ChangeEventArgs e) => Content.Value.Address1 = e.Value?.ToString() ?? Content.Value.Address1;
    private void OnAddress2Change(ChangeEventArgs e) => Content.Value.Address2 = e.Value?.ToString() ?? Content.Value.Address2;
    private void CityChange(ChangeEventArgs e) => Content.Value.City = e.Value?.ToString() ?? Content.Value.City;
    private void StateChange(ChangeEventArgs e) => Content.Value.State = e.Value?.ToString() ?? Content.Value.State;
    private void ZipCodeChange(ChangeEventArgs e) => Content.Value.ZipCode = e.Value?.ToString() ?? Content.Value.ZipCode;

    public void EnableDelete() => _disableDelete = true;
    public void ClearDelete() => _disableDelete = false;
}
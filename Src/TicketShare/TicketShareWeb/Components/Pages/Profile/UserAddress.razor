@rendermode InteractiveServer

@using Microsoft.FluentUI.AspNetCore.Components;
@using TicketShareWeb.Application
@using TicketShareWeb.Components.Pages.Profile.Models

@if (_contacts is not null)
{
    <FeedBlock Title="Address" Class="feed-block-datagrid" OnAdd="Add">
        <FluentDataGrid Class="feed-block-datagrid" Items="@_contacts" GridTemplateColumns="330px 40px" ShowHover="true" GenerateHeader=GenerateHeaderOption.None>
            <PropertyColumn Property="@(p => p.ToString())" Sortable="true" />
            <TemplateColumn Class="padding-clear" Align="Align.End">
                <FluentButton IconStart="@(new Icons.Regular.Size20.Edit())" onclick="() => EditContact(context)" />
            </TemplateColumn>
        </FluentDataGrid>
    </FeedBlock>
}


@code {
    [Inject] public IDialogService _dialogService { get; set; } = null!;
    [CascadingParameter] public UserAccountContext UserAccountContext { get; set; } = null!;

    IDialogReference _dialog = null!;
    private IQueryable<AddressModel> _contacts = null!;

    protected override void OnParametersSet() => Refresh();

    private async Task EditContact(AddressModel model)
    {
        // var parameters = new DialogParameters()
        //     {
        //         Alignment = HorizontalAlignment.Right,
        //         ShowDismiss = true,
        //         Title = "Edit Contact",
        //         PrimaryActionEnabled = false,
        //         PrimaryAction = null,
        //         SecondaryActionEnabled = false,
        //         SecondaryAction = null,
        //     };

        // var panelParameters = new PanelParameters<ContactModel>(model, true);
        // _dialog = await _dialogService.ShowPanelAsync<UserContactDialog>(panelParameters, parameters);

        // var result = await _dialog.Result;
        // if (result.Cancelled || result.Data is null || result.Data is not PanelResult<ContactModel> data) return;

        // if (data.DoDelete)
        // {
        //     await UserAccountContext.Contact.Delete(model);
        // }
        // else
        // {
        //     await UserAccountContext.Contact.Set(data.Value.NotNull());
        // }

        Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Add()
    {
        var model = new ContactModel { Type = "Email", Value = "" };
        var parameters = new DialogParameters<ContactModel>()
            {
                Content = model,
                Alignment = HorizontalAlignment.Right,
                ShowDismiss = true,
                Title = "Add Contact",
                PrimaryAction = null,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                SecondaryAction = null,
            };

        var panelParameters = new PanelParameters<ContactModel>(model);
        _dialog = await _dialogService.ShowPanelAsync<UserContactDialog>(panelParameters, parameters);
        var result = await _dialog.Result;
        if (result.Cancelled || result.Data is null || result.Data is not PanelResult<ContactModel> data) return;

        await UserAccountContext.Contact.Set(data.Value.NotNull());

        Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private void Refresh()
    {
        _contacts = UserAccountContext.Input.AddressItems.Values
            .OrderBy(x => x.ToString())
            .AsQueryable();
    }
}

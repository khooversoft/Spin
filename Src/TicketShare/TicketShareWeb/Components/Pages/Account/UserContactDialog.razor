@using TicketShareWeb.Components.Pages.Profile.Models

@implements IDialogContentComponent<PanelParameters<ContactModel>>

<FluentDialogBody>
    <DialogFrame OnClose="OnCloseButton" OnSet="OnSetButton" OnDelete="OnDeleteButton" ShowDelete="Content.IsEdit" DisableSave="_disableSave">

        <FluentSelect Items=@ContactModelTool.ValidContactTypes
                      Label="Contact Type:"
                      OptionText="@(i => i.Text)"
                      OptionValue="@(i => i.Value)"
                      OptionSelected="@(i => i.Selected)"
                      @bind-Value="@Content.Value.Type"
                      @oninput="OnTypeChange" />

        <FluentTextField Class="dialog-editbox" @bind-Value="@Content.Value.Value" @oninput="OnValueChange">Value:</FluentTextField>

    </DialogFrame>

</FluentDialogBody>

@code {
    [Parameter] public PanelParameters<ContactModel> Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = null!;

    private ContactModel _current = default!;
    private bool _disableSave = true;

    protected override void OnParametersSet() => _current = Content.Value.Clone();

    private async Task OnSetButton() => await Dialog.CloseAsync(PanelResult<ContactModel>.Set(Content.Value));
    private async Task OnDeleteButton() => await Dialog.CloseAsync(PanelResult<ContactModel>.Delete());
    private async Task OnCloseButton() => await Dialog.CancelAsync();

    private void OnTypeChange(ChangeEventArgs e) => UpdateState(() => Content.Value.Type = e.Value?.ToString() ?? Content.Value.Type);
    private void OnValueChange(ChangeEventArgs e) => UpdateState(() => Content.Value.Value = e.Value?.ToString() ?? Content.Value.Value);

    private void UpdateState(Action update)
    {
        update();
        _disableSave = Content.Value == _current;
    }
}
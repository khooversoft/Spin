@rendermode InteractiveServer

@using Microsoft.FluentUI.AspNetCore.Components;
@using TicketShare.sdk
@using TicketShareWeb.Application

<FeedBlock Title="Calendar" Class="feed-block-datagrid" OnAdd="Add">
    <FluentDataGrid Class="feed-block-datagrid"
    Items="@_calendars"
    GridTemplateColumns="110px 130px 130px"
    ShowHover="true"
    GenerateHeader=GenerateHeaderOption.None
    TGridItem="CalendarModel"
    OnRowClick="HandleRowFocus">

        <PropertyColumn Property="@(p => p.Type)" Sortable="true" />
        <PropertyColumn Property="@(p => p.FromDate.ToString("yyyy-MM-dd"))" Sortable="true" />
        <PropertyColumn Property="@(p => p.ToDate.ToString("yyyy-MM-dd"))" Sortable="true" />
    </FluentDataGrid>
</FeedBlock>


@code {
    [Inject] public IDialogService _dialogService { get; set; } = null!;
    [Inject] public ILogger<UserCalendars> _logger { get; set; } = null!;
    [CascadingParameter] public UserAccountContext UserAccountContext { get; set; } = null!;

    private IQueryable<CalendarModel> _calendars = null!;
    private RightPanelDialog<CalendarModel, UserCalendarDialog> _rightPanelDialog = null!;

    protected override void OnParametersSet()
    {
        var context = new ScopeContext(_logger);

        _rightPanelDialog = new RightPanelDialog<CalendarModel, UserCalendarDialog>(
            _dialogService,
            x => UserAccountContext.Calendar.Set(x, context),
            x => UserAccountContext.Calendar.Delete(x, context)
        );

        Refresh();
    }

    private async Task HandleRowFocus(FluentDataGridRow<CalendarModel> row)
    {
        var result = await _rightPanelDialog.Edit(row.Item.NotNull(), "Edit Calendar");
        if (result == RightPanelDialog.Canceled) return;

        Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Add()
    {
        var model = new CalendarModel { Type = "Busy" };

        var result = await _rightPanelDialog.Add(model, "Add Calendar");
        if (result == RightPanelDialog.Canceled) return;

        Refresh();
        await InvokeAsync(StateHasChanged);
    }

    public void Refresh()
    {
        _calendars = UserAccountContext.Input.CalendarItems.Values.OrderBy(x => x.FromDate).AsQueryable();
    }
}

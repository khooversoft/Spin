@using TicketShare.sdk
@using System.Collections.Concurrent

<FluentTextField Name="Content.Name"
                 @bind-Value="Content.Name"
                 Required="true"
                 Placeholder="name of channel"
                 Label="Name"
                 Class="form-editbox"
                 ReadOnly="@ReadOnly"
                 @oninput="OnNameChange" />

<ValidationError Errors="@_errors" FieldName="@_nameField" />

@code {
    [Parameter] public ChannelHeaderModel Content { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public bool ReadOnly { get; set; }

    private FormValidation _errors = new();
    private const string _nameField = "Content.Name";

    private async Task OnNameChange(ChangeEventArgs e)
    {
        Content.Name = e.Value?.ToString() ?? Content.Name;

        if (Content.Name.IsEmpty() || ChannelHeaderTool.ValidateName(Content.Name).IsOk(out var result))
            _errors.Remove(_nameField);
        else
            _errors[_nameField] = result.Error;

        await OnChange.InvokeAsync();
    }
}

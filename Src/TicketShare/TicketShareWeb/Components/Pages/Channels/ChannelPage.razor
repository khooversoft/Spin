@page "/Channel/{ChannelId}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using TicketShare.sdk
@using Toolbox.Graph.Extensions

<LoadingBlock Visible=@_loading />

<FeedColumn>
    <DialogControls OnClose="OnClose" />

    @foreach (var item in _messageList)
    {
        <ChannelMessageBlock Content=item />
    }

    @if (_principalId is not null)
    {
        <TextEditorBlock YesText="Send" OnYes="SendMessage" />
    }

</FeedColumn>

@code {
    [Parameter] public string ChannelId { get; set; } = null!;
    [Inject] public UserAccountContext _userAccountContext { get; set; } = null!;
    [Inject] public ApplicationNavigation _appNavigation { get; set; } = null!;
    [Inject] public ChannelClient _channelClient { get; set; } = null!;
    [Inject] public ILogger<ChannelPage> _logger { get; set; } = null!;

    private ChannelContext _channelContext;
    private bool _loading { get; set; } = true;
    private IReadOnlyList<ChannelMessage> _messageList = [];
    private string? _principalId;
    private ScopeContext _context;

    protected override async Task OnParametersSetAsync()
    {
        _context = new ScopeContext(_logger);
        var identityOption = await _userAccountContext.GetPrincipalIdentity(_context).ConfigureAwait(false);
        if (identityOption.IsError())
        {
            _logger.LogError("Failed to get principal identity");
            _appNavigation.GotoHome();
            return;
        }

        _principalId = identityOption.Return().PrincipalId;
        _channelContext = _channelClient.GetContext(ChannelId, _principalId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh();
            _loading = false;
            StateHasChanged();
        }
    }

    private void OnClose() => _appNavigation.GotoChannels();

    private async Task SendMessage(string message)
    {
        var channelMessage = new ChannelMessage
            {
                ChannelId = ChannelId,
                FromPrincipalId = _principalId.NotEmpty(),
                Message = message
            };

        var result = await _channelContext.AddMessage(channelMessage, new ScopeContext(_logger));
        if (result.IsError())
        {
            _logger.LogError("Failed to send message to channelId={channelId}", ChannelId);
            return;
        }

        await Refresh();
    }

    private async Task Refresh()
    {
        var listOption = await _channelContext.GetMessages(new ScopeContext(_logger));
        _messageList = listOption.IsOk() switch
        {
            true => listOption.Return(),
            false => [],
        };
    }
}

@page "/Account"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using TicketShare.sdk
@using TicketShareWeb.Application
@using Toolbox.Identity

<PageTitle>Account</PageTitle>

<EditForm Model="Input" method="post" OnValidSubmit="UpdateUser" FormName="register">
    <DataAnnotationsValidator />
    <FluentValidationSummary class="text-danger" role="alert" />

    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Name="Input.Name" @bind-Value="Input.Name" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%" />
        <FluentValidationMessage For="() => Input.Name" class="text-danger" />
        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Log in</FluentButton>
    </FluentStack>
</EditForm>

@code {
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] public ILogger<Profile> _logger { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public UserAccountManager _userAccountManager { get; set; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string _principalId = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        _principalId = authState.User.Identity.NotNull().Name.NotEmpty();
        var accountOption = await _userAccountManager.GetAccount(_principalId);
        accountOption.ThrowOnError(nameof(OnInitializedAsync));

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if( firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            _principalId = authState.User.Identity.NotNull().Name.NotEmpty();
            var accountOption = await _userAccountManager.GetAccount(_principalId);
            accountOption.ThrowOnError(nameof(OnInitializedAsync));

            Input = CreateModel(accountOption.Return());
        }
    }

    private async Task UpdateUser()
    {
        var accountOption = await _userAccountManager.GetAccount(_principalId);
        accountOption.ThrowOnError(nameof(OnInitializedAsync));
        var account = accountOption.Return();

        var newAccount = account with
            {
                Name = Input.Name
            };

        var result = await _userAccountManager.SetAccount(newAccount);
        NavigationManager.NavigateTo("/", true);
    }

    private InputModel CreateModel(AccountRecord accountRecord)
    {
        return new InputModel
            {
                Name = accountRecord.Name ?? "",
            };
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Name")]
        public string Name { get; set; } = "";
    }
}

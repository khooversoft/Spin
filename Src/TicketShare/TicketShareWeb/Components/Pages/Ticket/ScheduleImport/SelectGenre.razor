@rendermode InteractiveServer

@using TicketApi.sdk

<FeedBlock Title="Genre" Class="feed-block-datagrid" OnEdit="OnEdit" DisableEdit="@(_scheduleContext.Genre == null)" Disabled="@(_scheduleContext.Segment == null)">
    <div style="margin: 10px">

        @foreach (var item in _scheduleContext.GetGenreSelect())
        {
            Appearance appearance = _scheduleContext.Genre?.Id == item.Id ? Appearance.Accent : Appearance.Outline;

            <FluentButton Appearance="appearance" OnClick="@(() => SwitchButton(item.Id))">@item.Name</FluentButton>
        }

    </div>
</FeedBlock>

@code {
    [CascadingParameter] public TicketScheduleContext _scheduleContext { get; set; } = null!;
    [Parameter] public EventCallback OnRefresh { get; set; }
    @inject ILogger<SelectGenre> _logger;

    private async Task Refresh() => await OnRefresh.InvokeAsync();

    private async Task OnEdit()
    {
        _scheduleContext.SetGenre(null);
        await Refresh();
    }

    private async Task SwitchButton(string id)
    {
        _scheduleContext.SetGenre(id);
        await Refresh();
    }
}

@rendermode InteractiveServer

@using Microsoft.FluentUI.AspNetCore.Components;
@using TicketShare.sdk
@using TicketShareWeb.Application

<FeedBlock Title="Contacts" Class="feed-block-datagrid" OnAdd="Add">
    <FluentDataGrid Class="feed-block-datagrid"
                    Items="@_roles"
                    ShowHover="true"
                    GenerateHeader=GenerateHeaderOption.None
                    TGridItem="RoleModel"
                    AutoFit="true"
                    OnRowClick="HandleRowFocus">
        <PropertyColumn Property="@(p => p.MemberRole)" Sortable="true" />
        <PropertyColumn Property="@(p => p.PrincipalId)" Sortable="true" />
    </FluentDataGrid>
</FeedBlock>


@code {
    [Inject] public IDialogService _dialogService { get; set; } = null!;
    [Inject] public ILogger<TicketRoles> _logger { get; set; } = null!; 
    [CascadingParameter] public TicketGroupContext _ticketGroupContext { get; set; } = null!;

    private IQueryable<RoleModel> _roles = null!;
    private RightPanelDialog<RoleModel, TicketRoleDialog> _rightPanelDialog = null!;

    protected override void OnParametersSet()
    {
        var context = new ScopeContext(_logger);

        _rightPanelDialog = new RightPanelDialog<RoleModel, TicketRoleDialog>(
            _dialogService,
            x => _ticketGroupContext.Roles.Set(x, context),
            x => _ticketGroupContext.Roles.Delete(x, context)
        );

        Refresh();
    }

    private async Task HandleRowFocus(FluentDataGridRow<RoleModel> row)
    {
        var result = await _rightPanelDialog.Edit(row.Item.NotNull(), "Edit Contact");
        if (result == RightPanelDialog.Canceled) return;

        Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Add()
    {
        var model = new RoleModel { MemberRole = RoleType.Contributor.ToString() };

        var result = await _rightPanelDialog.Add(model, "Add User Role");
        if (result == RightPanelDialog.Canceled) return;

        Refresh();
        await InvokeAsync(StateHasChanged);
    }

    public void Refresh()
    {
        _roles = _ticketGroupContext.Input.Roles.Values.OrderBy(x => x.PrincipalId).AsQueryable();
    }
}

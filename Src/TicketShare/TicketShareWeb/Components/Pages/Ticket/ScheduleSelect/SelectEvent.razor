@rendermode InteractiveServer
@using TicketApi.sdk

<FeedBlock Title="Select Event" Class="feed-block-datagrid" OnEdit="OnEdit" DisableEdit="@(_scheduleContext.Events.Count == 0)" Disabled="@(_scheduleContext.Team == null)">
    <FluentDataGrid Class="feed-block-datagrid"
                    Items="@_events"
                    ShowHover="true"
                    GenerateHeader=GenerateHeaderOption.None
                    TGridItem="EventDisplay"
                    AutoFit="true"
                    ResizableColumns="false"
                    OnRowClick="HandleRowFocus">

        <PropertyColumn Property="@(p => p.Date)" Sortable="true" Format="mm/dd/yy" Width="90px" />
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <TemplateColumn Title="Bonus">
            <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Bonus())">Regular</FluentButton>
        </TemplateColumn>
    </FluentDataGrid>

</FeedBlock>

@* <FeedBlock Title="Select Event" Class="feed-block-datagrid" OnEdit="OnEdit" DisableEdit="@(_scheduleContext.Events.Count == 0)" Disabled="@(_scheduleContext.Team == null)">
    <div style="margin: 10px">
        <FluentStack Orientation="Orientation.Horizontal" Wrap=true>

            @foreach (var item in _scheduleContext.GetEventSelect(_ticketOption.OnlyHomeGames))
            {
                bool isSelected = item.selected;
                string data = $"{item.eventRecord.Name}-{item.eventRecord.LocalDateTime?.ToString()}";
                <SelectButton IsSelected="@isSelected" Id="@item.eventRecord.Id" Name="@data" OnSwitch="SwitchButton" />
            }

        </FluentStack>

    </div>
</FeedBlock>
 *@
@code {
    [CascadingParameter] public TicketScheduleContext _scheduleContext { get; set; } = null!;
    [Parameter] public EventCallback OnRefresh { get; set; }
    @inject ILogger<SelectEvent> _logger;
    @inject TicketOption _ticketOption;

    private IQueryable<EventDisplay> _events = null!;

    void Bonus() { }

    protected override void OnInitialized()
    {
        _events = GetEvents();
    }

    protected override void OnParametersSet()
    {
        _events = GetEvents();
    }

    private async Task Refresh() => await OnRefresh.InvokeAsync();

    private async Task OnEdit()
    {
        _scheduleContext.SetEvent(null);
        await Refresh();
    }

    private async Task SwitchButton(string id)
    {
        _scheduleContext.SetEvent(id);
        await Refresh();
    }

    private async Task HandleRowFocus(FluentDataGridRow<EventDisplay> row)
    {
        // var result = await _rightPanelDialog.Edit(row.Item.NotNull(), "Edit Seat");
        // if (result == RightPanelDialog.Canceled) return;

        // Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private IQueryable<EventDisplay> GetEvents() => _scheduleContext.GetEventSelect(_ticketOption.OnlyHomeGames)
        .Select(x => x.eventRecord)
        .Where(x => x.LocalDateTime != null)
        .Select(x => new EventDisplay(x.LocalDateTime!.Value, x.Name))
        .OrderBy(x => x.Date)
        .AsQueryable();

    private readonly struct EventDisplay
    {
        public EventDisplay(DateTime date, string name)
        {
            Date = date;
            Name = name;
        }

        public DateTime Date { get; }
        public string Name { get; }
    }
}

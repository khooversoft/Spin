@page "/TicketGroup/{TicketGroupId}"

@using TicketShareWeb.Components.Pages.Ticket.Model

<LoadingBlock Visible=@Visible />

@if (_ticketGroupContext != null && _ticketGroupContext.IsLoaded())
{
    <FeedColumn>

        <DialogControls OnClose="OnClose" OnDelete="OnDelete" ShowDelete="true" />

        <CascadingValue Value="_ticketGroupContext">
            <TicketHeader />
            <TicketRoles />
            <TicketSeats />
        </CascadingValue>
    </FeedColumn>
}

@code {
    [Parameter] public string TicketGroupId { get; set; } = null!;
    [Inject] public AppNavigation _appNavigation { get; set; } = null!;
    [Inject] public TicketGroupManager _ticketGroupManager { get; set; } = null!;
    [Inject] public AskPanel AskPanel { get; set; } = default!;
    [Inject] public ILogger<TicketGroupPage> _logger { get; set; } = null!;

    private TicketGroupContext? _ticketGroupContext = null!;
    private bool Visible { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        var context = _ticketGroupManager.GetContext(TicketGroupId);
        var option = await context.Get();
        if (option.IsError())
        {
            _logger.LogError("Failed to get ticketGroupId={ticketGroupId}", TicketGroupId);
            OnClose();
            return;
        }

        _ticketGroupContext = context;
        Visible = false;
    }

    private void OnClose() => _appNavigation.GotoTicketGroups();

    private async Task OnDelete()
    {
        bool confirmDelete = await AskPanel.Show("Confirm delete", $"Do you want to delete this ticket group {_ticketGroupContext.Input.Name}?");
        if (!confirmDelete) return;

        await SetLoading(true);

        var result = await _ticketGroupContext.Delete();
        if (result.IsError())
        {
            _logger.LogError("Failed to delete ticketGroupId={ticketGroupId}", TicketGroupId);
        }

        _ticketGroupContext = null;
        OnClose();
    }

    private async Task SetLoading(bool visible)
    {
        Visible = visible;
        await InvokeAsync(StateHasChanged);
    }
}

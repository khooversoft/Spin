@using TicketShareWeb.Components.Pages.Ticket.Model

@implements IDialogContentComponent<PanelParameters<TicketGroupHeaderModel>>

@if (Content != null)
{
    <FluentDialogBody>
        <DialogFrame OnClose="OnCloseButton" OnSet="OnSetButton" DisableSave="_disableSave" ShowSave="true">

            <EditHeader Content="@Content.Value" OnChange="RefreshSaveState" />

        </DialogFrame>
    </FluentDialogBody>
}

@code {
    [Parameter] public PanelParameters<TicketGroupHeaderModel> Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = null!;

    private bool _disableSave = true;
    private TicketGroupHeaderModel _current = default!;

    protected override void OnParametersSet()
    {
        _current = Content.Value.Clone();
        RefreshSaveState();
    }

    private async Task OnSetButton() => await Dialog.CloseAsync(PanelResult<TicketGroupHeaderModel>.Set(Content.Value));
    private async Task OnDeleteButton() => await Dialog.CloseAsync(PanelResult<TicketGroupHeaderModel>.Delete());
    public async Task OnCloseButton() => await Dialog.CancelAsync();

    private void RefreshSaveState() => _disableSave = Content.IsEdit switch
    {
        true => !HasDataRequired() || Content.Value == _current,
        false => !HasDataRequired()
    };

    private bool HasDataRequired() => Content.Value.Validate().IsOk();
}
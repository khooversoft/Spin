@page "/Channels"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using TicketShare.sdk

<LoadingBlock Visible=@Visible />

@if (_inputs != null)
{
    <FeedColumn>
        <FeedBlock Title="Channels" OnAdd="Add">

            <FluentDataGrid Class="feed-block-datagrid"
            Items="@_entries"
            ShowHover="true"
            TGridItem="ChannelInfo"
            OnRowClick="HandleRowFocus"
            AutoFit="true"
            GenerateHeader=GenerateHeaderOption.None>

                <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            </FluentDataGrid>

        </FeedBlock>
    </FeedColumn>
}

@code {
    [Inject] public AppNavigation _appNavigation { get; set; } = null!;
    [Inject] public AuthenticationAccess _authenticationAccess { get; set; } = null!;
    [Inject] public HubChannelManager _hubChannelManager { get; set; } = null!;
    [Inject] public IDialogService _dialogService { get; set; } = null!;
    [Inject] public IMessageService _messageService { get; set; } = null!;
    [Inject] public ILogger<ChannelPage> _logger { get; set; } = null!;

    private bool Visible { get; set; } = true;

    private IReadOnlyList<ChannelInfo> _inputs = null!;
    private IQueryable<ChannelInfo> _entries = null!;
    // private RightPanelDialog<TicketGroupHeaderModel, EditHeaderDialog> _rightPanelDialog = null!;

    private record TicketGroupDetail(string TicketGroupId, string Name, string? Description);

    protected override async Task OnParametersSetAsync()
    {
        // _rightPanelDialog = new RightPanelDialog<TicketGroupHeaderModel, EditHeaderDialog>(
        //     _dialogService,
        //     x => CreateTicketGroup(x),
        //     null
        //     );

        await Refresh();
    }

    private void HandleRowFocus(FluentDataGridRow<ChannelInfo> row)
    {
        row.Item.NotNull();
        _appNavigation.GotoChannel(row.Item.ChannelId);
    }

    private async Task Add()
    {
        // var model = new TicketGroupHeaderModel();

        // var result = await _rightPanelDialog.Add(model, "Add Ticket Group");
        // if (result == RightPanelDialog.Canceled) return;

        // await Refresh();
    }

    private async Task Refresh()
    {
        await SetLoading(true);

        var principalId = (await _authenticationAccess.GetPrincipalId()).NotEmpty();

        var context = new ScopeContext(_logger);
        var result = await _hubChannelManager.GetChannelsInfo(principalId, context);
        result.ThrowOnError();

        _inputs = result.Return();
        _entries = _inputs
            .OrderBy(x => x.Name)
            .AsQueryable();

        await SetLoading(false);
    }

    private async Task SetLoading(bool visible)
    {
        Visible = visible;
        await InvokeAsync(StateHasChanged);
    }
}

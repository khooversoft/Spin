@using TicketShare.sdk

@implements IDialogContentComponent<PanelParameters<CalendarModel>>

<FluentDialogBody>
    <DialogFrame OnClose="OnCloseButton" OnSet="OnSetButton" OnDelete="OnDeleteButton" ShowDelete="Content.IsEdit" DisableSave="_disableSave">

        <FluentSelect Items=@_validTypes
                      Label="Contact Type:"
                      OptionText="@(i => i.Text)"
                      OptionValue="@(i => i.Value.ToString())"
                      OptionSelected="@(i => i.Selected)"
                      @bind-Value="@ContactType" />

        <FluentDatePicker Label="From Date" @bind-Value="@FromDateValue" />
        <FluentDatePicker Label="To Date" @bind-Value="@ToDateValue" />

    </DialogFrame>
</FluentDialogBody>

@code {
    [Parameter] public PanelParameters<CalendarModel> Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = null!;

    private bool _disableSave = true;
    private CalendarModel _current = default!;

    static List<Fluent.Option<CalendarRecordType>> _validTypes = new()
    {
        new Fluent.Option<CalendarRecordType> { Value = CalendarRecordType.Busy, Text = "Busy" },
        new Fluent.Option<CalendarRecordType> { Value = CalendarRecordType.Tenative, Text = "Tenative" },
    };

    protected override void OnParametersSet()
    {
        _current = Content.Value.Clone();
        RefreshSaveState();
    }

    private string ContactType { get => Content.Value.Type; set => Update(() => Content.Value.Type = value); }
    private DateTime? FromDateValue { get => Content.Value.FromDate; set => Update(() => Content.Value.FromDate = value ?? DateTime.Now); }
    private DateTime? ToDateValue { get => Content.Value.ToDate; set => Update(() => Content.Value.ToDate = value ?? DateTime.Now); }

    private async Task OnSetButton() => await Dialog.CloseAsync(PanelResult<CalendarModel>.Set(Content.Value));
    private async Task OnDeleteButton() => await Dialog.CloseAsync(PanelResult<CalendarModel>.Delete());
    public async Task OnCloseButton() => await Dialog.CancelAsync();

    private void Update(Action update)
    {
        update();
        RefreshSaveState();
    }

    private void RefreshSaveState() => _disableSave = Content.IsEdit switch
    {
        true => !HasDataRequired() || Content.Value == _current,
        false => !HasDataRequired()
    };

    private bool HasDataRequired() =>
            Content.Value.Type.IsNotEmpty() &&
            Content.Value.FromDate.IsDateTimeValid() &&
            Content.Value.ToDate.IsDateTimeValid() &&
            Content.Value.FromDate <= Content.Value.ToDate;
}